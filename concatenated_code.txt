Directory structure of included files:
└── vendor-management-webapp
    └── manage.py
    └── core
        └── core/
            └── admin.py
            └── apps.py
            └── forms.py
            └── models.py
            └── tests.py
            └── urls.py
            └── utils.py
            └── views.py
            └── __init__.py
            └── management/
                └── commands/
                    └── clear_db.py
                    └── describe_models.py
                    └── populate_db.py
                    └── __pycache__/
            └── migrations/
                └── 0001_initial.py
                └── 0002_part_created_at_part_updated_at_risk_created_at_and_more.py
                └── __init__.py
                └── __pycache__/
            └── templates/
                └── core/
                    └── dashboard.html
                    └── home.html
                    └── pagination.html
                    └── part_form.html
                    └── risk_form.html
                    └── spend_form.html
                    └── vendor_form.html
                    └── vendor_list.html
                    └── vendor_profile.html
            └── __pycache__/
    └── data_import
        └── data_import/
            └── admin.py
            └── apps.py
            └── forms.py
            └── import_handlers.py
            └── models.py
            └── tests.py
            └── urls.py
            └── views.py
            └── __init__.py
            └── migrations/
                └── __init__.py
                └── __pycache__/
            └── templates/
                └── data_import/
                    └── import.html
            └── __pycache__/
    └── templates
        └── templates/
            └── base.html
            └── registration/
                └── login.html
    └── vendor_management
        └── vendor_management/
            └── asgi.py
            └── settings.py
            └── urls.py
            └── wsgi.py
            └── __init__.py
            └── __pycache__/



================================================================================
File: manage.py
================================================================================
"""
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'vendor_management.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()

"""

================================================================================
File: core\admin.py
================================================================================
"""
# core/admin.py
from django.contrib import admin
from .models import Vendor, Part, Spend, Risk

admin.site.register(Vendor)
admin.site.register(Part)
admin.site.register(Spend)
admin.site.register(Risk)

"""

================================================================================
File: core\apps.py
================================================================================
"""
from django.apps import AppConfig


class CoreConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'core'

"""

================================================================================
File: core\forms.py
================================================================================
"""
from django import forms
from .models import Vendor, Part, Spend, Risk

class VendorForm(forms.ModelForm):
    class Meta:
        model = Vendor
        fields = ['vendor_name', 'vendor_id', 'payment_terms', 'credit_limit', 'contract_year', 'relationship_type']

class PartForm(forms.ModelForm):
    class Meta:
        model = Part
        fields = ['part_number', 'vendor', 'buyer', 'discount']

class SpendForm(forms.ModelForm):
    class Meta:
        model = Spend
        fields = ['vendor', 'year', 'usd_amount']

class RiskForm(forms.ModelForm):
    class Meta:
        model = Risk
        fields = ['vendor', 'risk_level']

"""

================================================================================
File: core\models.py
================================================================================
"""
from django.db import models
from django.core.validators import MinValueValidator, MaxValueValidator


class Vendor(models.Model):
    vendor_name = models.CharField(max_length=200)
    vendor_id = models.CharField(max_length=50, unique=True)
    payment_terms = models.CharField(max_length=100)
    credit_limit = models.DecimalField(
        max_digits=10, decimal_places=2, validators=[MinValueValidator(0)]
    )
    contract_year = models.IntegerField(
        validators=[MinValueValidator(1900), MaxValueValidator(2100)]
    )
    relationship_type = models.CharField(
        max_length=50,
        choices=[
            ("DIRECT", "Direct"),
            ("THIRD PARTY", "Third Party"),
        ],
    )
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"{self.vendor_name} ({self.vendor_id})"


class Part(models.Model):
    part_number = models.CharField(max_length=50, unique=True)
    vendor = models.ForeignKey(Vendor, on_delete=models.CASCADE, related_name="parts")
    buyer = models.CharField(max_length=100)
    discount = models.DecimalField(
        max_digits=5,
        decimal_places=2,
        validators=[MinValueValidator(0), MaxValueValidator(100)],
    )
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"{self.part_number} - {self.vendor.vendor_name}"


class Spend(models.Model):
    vendor = models.ForeignKey(Vendor, on_delete=models.CASCADE, related_name="spends")
    year = models.IntegerField(
        validators=[MinValueValidator(1900), MaxValueValidator(2100)]
    )
    usd_amount = models.DecimalField(
        max_digits=12, decimal_places=2, validators=[MinValueValidator(0)]
    )
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        unique_together = ["vendor", "year"]

    def __str__(self):
        return f"{self.vendor.vendor_name} - {self.year}: ${self.usd_amount}"


class Risk(models.Model):
    vendor = models.OneToOneField(Vendor, on_delete=models.CASCADE, related_name="risk")
    risk_level = models.CharField(
        max_length=50, choices=[("LOW", "Low"), ("MEDIUM", "Medium"), ("HIGH", "High")]
    )
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"{self.vendor.vendor_name} - Risk: {self.get_risk_level_display()}"

"""

================================================================================
File: core\tests.py
================================================================================
"""
from django.test import TestCase
from django.urls import reverse
from .models import Vendor, Part, Spend, Risk

class VendorModelTest(TestCase):
    def setUp(self):
        self.vendor = Vendor.objects.create(
            vendor_name="Test Vendor",
            vendor_id="TV001",
            payment_terms="Net 30",
            credit_limit=10000,
            contract_year=2023,
            relationship_type="STRATEGIC"
        )

    def test_vendor_creation(self):
        self.assertTrue(isinstance(self.vendor, Vendor))
        self.assertEqual(self.vendor.__str__(), "Test Vendor (TV001)")

class VendorListViewTest(TestCase):
    def setUp(self):
        Vendor.objects.create(
            vendor_name="Vendor 1",
            vendor_id="V001",
            payment_terms="Net 30",
            credit_limit=10000,
            contract_year=2023,
            relationship_type="STRATEGIC"
        )
        Vendor.objects.create(
            vendor_name="Vendor 2",
            vendor_id="V002",
            payment_terms="Net 60",
            credit_limit=20000,
            contract_year=2023,
            relationship_type="PREFERRED"
        )

    def test_view_url_exists_at_desired_location(self):
        response = self.client.get('/vendors/')
        self.assertEqual(response.status_code, 200)

    def test_view_url_accessible_by_name(self):
        response = self.client.get(reverse('vendor_list'))
        self.assertEqual(response.status_code, 200)

    def test_view_uses_correct_template(self):
        response = self.client.get(reverse('vendor_list'))
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'core/vendor_list.html')

    def test_search_functionality(self):
        response = self.client.get(reverse('vendor_list'), {'search': 'Vendor 1'})
        self.assertContains(response, 'Vendor 1')
        self.assertNotContains(response, 'Vendor 2')

"""

================================================================================
File: core\urls.py
================================================================================
"""
from django.urls import path
from .views import DashboardView, VendorListView, VendorProfileView

urlpatterns = [
    path("", DashboardView.as_view(), name="dashboard"),
    path("vendors/", VendorListView.as_view(), name="vendor_list"),
    path("vendors/<int:pk>/", VendorProfileView.as_view(), name="vendor_profile"),
]

"""

================================================================================
File: core\utils.py
================================================================================
"""
import logging

logger = logging.getLogger(__name__)


def log_error(func):
    def wrapper(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except Exception as e:
            logger.error(f"Error in {func.__name__}: {str(e)}")
            raise

    return wrapper

"""

================================================================================
File: core\views.py
================================================================================
"""
from django.views.generic import ListView, DetailView, TemplateView
from django.views.generic.edit import CreateView, UpdateView
from django.db.models import Sum, Count, Q
from django.urls import reverse_lazy
from django.utils.decorators import method_decorator
from django.views.decorators.cache import cache_page
from django.contrib.auth.mixins import LoginRequiredMixin
from django.contrib.auth.decorators import login_required
from django.utils.html import escape
from django.core.exceptions import ValidationError

from .models import Vendor, Part, Spend, Risk
from .forms import VendorForm
from .utils import log_error

import logging

logger = logging.getLogger(__name__)

@method_decorator(login_required, name="dispatch")
class DashboardView(LoginRequiredMixin, TemplateView):
    template_name = "core/dashboard.html"

    # @method_decorator(cache_page(60 * 15))  # Cache for 15 minutes
    def get(self, request, *args, **kwargs):
        return super().get(request, *args, **kwargs)

    @log_error
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["total_vendors"] = Vendor.objects.count()
        context["total_parts"] = Part.objects.count()
        context["total_spend"] = (
            Spend.objects.aggregate(Sum("usd_amount"))["usd_amount__sum"] or 0
        )
        context["high_risk_vendors"] = Vendor.objects.filter(
            risk__risk_level="HIGH"
        ).count()
        context["top_vendors"] = Vendor.objects.annotate(
            total_spend=Sum("spends__usd_amount")
        ).order_by("-total_spend")[:5]
        return context

@method_decorator(login_required, name="dispatch")
class VendorListView(ListView):
    model = Vendor
    template_name = "core/vendor_list.html"
    context_object_name = "vendors"
    paginate_by = 10

    def get_queryset(self):
        try:
            queryset = super().get_queryset().select_related("risk")
            search_query = escape(self.request.GET.get("search", ""))
            relationship_type = escape(self.request.GET.get("relationship_type", ""))
            risk_level = escape(self.request.GET.get("risk_level", ""))

            if search_query:
                queryset = queryset.filter(
                    Q(vendor_name__icontains=search_query) |
                    Q(vendor_id__icontains=search_query)
                )

            if relationship_type:
                queryset = queryset.filter(relationship_type=relationship_type)

            if risk_level:
                queryset = queryset.filter(risk__risk_level=risk_level)

            logger.debug(f"Vendor query: {queryset.query}")
            return queryset
        except ValidationError as e:
            logger.error(f"Validation error in VendorListView: {e}")
            return Vendor.objects.none()
        except Exception as e:
            logger.error(f"Unexpected error in VendorListView: {e}")
            return Vendor.objects.none()

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["search_query"] = self.request.GET.get("search", "")
        context["relationship_type"] = self.request.GET.get("relationship_type", "")
        context["risk_level"] = self.request.GET.get("risk_level", "")
        context["vendor_relationship_types"] = Vendor._meta.get_field('relationship_type').choices
        context["risk_levels"] = Risk._meta.get_field('risk_level').choices
        return context

@method_decorator(login_required, name="dispatch")
class VendorProfileView(LoginRequiredMixin, DetailView):
    model = Vendor
    template_name = "core/vendor_profile.html"
    context_object_name = "vendor"

    @log_error
    def get_queryset(self):
        return (
            super()
            .get_queryset()
            .prefetch_related("parts", "spends")
            .select_related("risk")
        )

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        vendor = self.object
        context["parts"] = vendor.parts.all()
        context["spends"] = vendor.spends.all().order_by("-year")
        context["risk"] = vendor.risk
        return context

@method_decorator(login_required, name="dispatch")
class VendorCreateView(LoginRequiredMixin, CreateView):
    model = Vendor
    form_class = VendorForm
    template_name = "core/vendor_form.html"
    success_url = reverse_lazy("vendor_list")

    @log_error
    def form_valid(self, form):
        response = super().form_valid(form)
        Risk.objects.create(vendor=self.object, risk_level="LOW")
        return response

@method_decorator(login_required, name="dispatch")
class VendorUpdateView(LoginRequiredMixin, UpdateView):
    model = Vendor
    form_class = VendorForm
    template_name = "core/vendor_form.html"
    success_url = reverse_lazy("vendor_list")

    @log_error
    def form_valid(self, form):
        return super().form_valid(form)

# You can add more views here as needed, such as views for Part, Spend, and Risk models

"""

================================================================================
File: core\__init__.py
================================================================================
"""

"""

================================================================================
File: core\management\commands\clear_db.py
================================================================================
"""
from django.core.management.base import BaseCommand
from django.apps import apps
from django.db import connection

class Command(BaseCommand):
    help = 'Clears all data from all tables in the database'

    def handle(self, *args, **kwargs):
        # Get all models
        models = apps.get_models()

        with connection.cursor() as cursor:
            # Disable foreign key checks
            if connection.vendor == 'sqlite':
                cursor.execute('PRAGMA foreign_keys = OFF;')
            
            for model in models:
                table_name = model._meta.db_table
                self.stdout.write(f'Clearing data from {table_name}')
                cursor.execute(f'DELETE FROM {table_name};')
                
                # Reset auto-increment counters for SQLite
                if connection.vendor == 'sqlite':
                    cursor.execute(f"DELETE FROM sqlite_sequence WHERE name='{table_name}';")

            # Re-enable foreign key checks
            if connection.vendor == 'sqlite':
                cursor.execute('PRAGMA foreign_keys = ON;')

        self.stdout.write(self.style.SUCCESS('Successfully cleared all data from the database'))

"""

================================================================================
File: core\management\commands\describe_models.py
================================================================================
"""
from django.core.management.base import BaseCommand
from django.apps import apps

class Command(BaseCommand):
    help = 'Describes the structure of all models in the project'

    def handle(self, *args, **options):
        for model in apps.get_models():
            self.stdout.write(self.style.SUCCESS(f'\nModel: {model.__name__}'))
            self.stdout.write('Fields:')
            for field in model._meta.fields:
                self.stdout.write(f'  - {field.name}: {field.get_internal_type()}')
            self.stdout.write('Relationships:')
            for field in model._meta.many_to_many:
                self.stdout.write(f'  - {field.name}: ManyToManyField to {field.related_model.__name__}')
            for related_object in model._meta.related_objects:
                self.stdout.write(f'  - {related_object.name}: {related_object.get_internal_type()} from {related_object.related_model.__name__}')

"""

================================================================================
File: core\management\commands\populate_db.py
================================================================================
"""
# core/management/commands/populate_db.py

from django.core.management.base import BaseCommand
from django.db import transaction
from core.models import Vendor, Part, Spend, Risk
from django.utils import timezone
import random
from decimal import Decimal

class Command(BaseCommand):
    help = "Populates the database with sample data for testing"

    @transaction.atomic
    def handle(self, *args, **kwargs):
        self.stdout.write("Populating database...")

        # Sample data
        sample_data = [
            ("EC00-1800FLOW-US-USD-25", "1800FL", "1800 FLOWERS", "B04", "N29"),
            ("EC00-1800FLOW-US-USD-50", "1800FL", "1800 FLOWERS", "B04", "N29"),
            (
                "EC00-1800PETS-US-USD-50",
                "PETSUN",
                "TABcom, LLC (DBA – petsupplies.com)",
                "B05",
                "N30",
            ),
            ("EC00-85CAFE-CN-CNY-20", "DATATR02", "DATATRADE LTD", "DAT", "FLOT"),
            (
                "EC00-A101-TR-TRY-1000",
                "SANMAG",
                "Bigbrands E-Ticket Hizmetleri ve ihract",
                "B08",
                "N5",
            ),
            (
                "EC00-A101-TR-TRY-250",
                "SANMAG",
                "Bigbrands E-Ticket Hizmetleri ve ihract",
                "B08",
                "N5",
            ),
            (
                "EC00-ABBVIE-US-USD-25",
                "BOUNDL",
                "Overture Promotions, Inc.",
                "B04",
                "N29",
            ),
            (
                "EC00-ACCENROW-US-USD-25",
                "BRANDA02",
                "Brand Addition (Accenture)",
                "B08",
                "N30",
            ),
            (
                "EC00-ACCENTUR-CA-CAD-25",
                "STAPACCA",
                "Staples Promotional Canada (Accenture Store Card)",
                "B08",
                "N30",
            ),
            (
                "EC00-ACCENTUR-US-USD-25",
                "STAPACUS",
                "Staples Promotional (Accenture Store Card - USD)",
                "B08",
                "N30",
            ),
        ]

        for part_number, vendor_id, vendor_name, buyer_id, terms in sample_data:
            # Create or update vendor
            vendor, _ = Vendor.objects.update_or_create(
                vendor_id=vendor_id,
                defaults={
                    "vendor_name": vendor_name,
                    "payment_terms": terms,
                    "credit_limit": Decimal(round(random.uniform(100000, 2000000), 2)),
                    "contract_year": timezone.now().year,
                    "relationship_type": random.choice(["DIRECT", "THIRD PARTY"]),
                },
            )

            # Create or update part
            Part.objects.update_or_create(
                part_number=part_number,
                defaults={
                    "vendor": vendor,
                    "buyer": buyer_id,
                    "discount": Decimal(round(random.uniform(0, 100), 2)),
                },
            )

            # Create or update spend data for the last 3 years
            current_year = timezone.now().year
            for year in range(current_year - 2, current_year + 1):
                Spend.objects.update_or_create(
                    vendor=vendor,
                    year=year,
                    defaults={
                        "usd_amount": Decimal(round(random.uniform(10000, 1000000), 2)),
                    },
                )

            # Create or update risk data
            Risk.objects.update_or_create(
                vendor=vendor,
                defaults={
                    "risk_level": random.choice(["LOW", "MEDIUM", "HIGH"]),
                },
            )

        self.stdout.write(self.style.SUCCESS("Database successfully populated!"))

"""

================================================================================
File: core\migrations\0001_initial.py
================================================================================
"""
# Generated by Django 5.0.7 on 2024-07-26 18:11

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Vendor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vendor_name', models.CharField(max_length=200)),
                ('vendor_id', models.CharField(max_length=50, unique=True)),
                ('payment_terms', models.CharField(max_length=100)),
                ('credit_limit', models.DecimalField(decimal_places=2, max_digits=10)),
                ('contract_year', models.IntegerField()),
                ('relationship_type', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Risk',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('risk_level', models.CharField(max_length=50)),
                ('vendor', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='risk', to='core.vendor')),
            ],
        ),
        migrations.CreateModel(
            name='Part',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('part_number', models.CharField(max_length=50, unique=True)),
                ('buyer', models.CharField(max_length=100)),
                ('discount', models.DecimalField(decimal_places=2, max_digits=5)),
                ('vendor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='parts', to='core.vendor')),
            ],
        ),
        migrations.CreateModel(
            name='Spend',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.IntegerField()),
                ('usd_amount', models.DecimalField(decimal_places=2, max_digits=12)),
                ('vendor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='spends', to='core.vendor')),
            ],
            options={
                'unique_together': {('vendor', 'year')},
            },
        ),
    ]

"""

================================================================================
File: core\migrations\0002_part_created_at_part_updated_at_risk_created_at_and_more.py
================================================================================
"""
# Generated by Django 5.0.7 on 2024-07-26 18:23

import django.core.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0001_initial'),
    ]

    operations = [
        migrations.AddField(
            model_name='part',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True, default=django.utils.timezone.now),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='part',
            name='updated_at',
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.AddField(
            model_name='risk',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True, default=django.utils.timezone.now),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='risk',
            name='updated_at',
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.AddField(
            model_name='spend',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True, default=django.utils.timezone.now),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='spend',
            name='updated_at',
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.AddField(
            model_name='vendor',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True, default=django.utils.timezone.now),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='vendor',
            name='updated_at',
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.AlterField(
            model_name='part',
            name='discount',
            field=models.DecimalField(decimal_places=2, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)]),
        ),
        migrations.AlterField(
            model_name='risk',
            name='risk_level',
            field=models.CharField(choices=[('LOW', 'Low'), ('MEDIUM', 'Medium'), ('HIGH', 'High')], max_length=50),
        ),
        migrations.AlterField(
            model_name='spend',
            name='usd_amount',
            field=models.DecimalField(decimal_places=2, max_digits=12, validators=[django.core.validators.MinValueValidator(0)]),
        ),
        migrations.AlterField(
            model_name='spend',
            name='year',
            field=models.IntegerField(validators=[django.core.validators.MinValueValidator(1900), django.core.validators.MaxValueValidator(2100)]),
        ),
        migrations.AlterField(
            model_name='vendor',
            name='contract_year',
            field=models.IntegerField(validators=[django.core.validators.MinValueValidator(1900), django.core.validators.MaxValueValidator(2100)]),
        ),
        migrations.AlterField(
            model_name='vendor',
            name='credit_limit',
            field=models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)]),
        ),
        migrations.AlterField(
            model_name='vendor',
            name='relationship_type',
            field=models.CharField(choices=[('STRATEGIC', 'Strategic'), ('PREFERRED', 'Preferred'), ('APPROVED', 'Approved'), ('TERMINATED', 'Terminated')], max_length=50),
        ),
    ]

"""

================================================================================
File: core\migrations\__init__.py
================================================================================
"""

"""

================================================================================
File: core\templates\core\dashboard.html
================================================================================
"""
{% extends 'base.html' %}
{% load static %}
{% load humanize %}

{% block extra_css %}
<style>
    .stat-card {
        height: 160px;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
    }

    .stat-card .card-body {
        padding: 1rem;
    }

    .stat-card .card-title {
        font-size: 1rem;
        margin-bottom: 0.5rem;
    }

    .stat-card .card-text {
        font-size: 1.5rem;
        font-weight: bold;
        margin-bottom: 0;
        word-wrap: break-word;
    }

    .currency-value {
        font-size: 1.2rem;
    }
</style>
{% endblock %}

{% block content %}
<h1 class="mb-4">Vendor Management Dashboard</h1>

<div class="row mb-4">
    <div class="col-md-3 mb-3">
        <div class="card bg-primary text-white stat-card">
            <div class="card-body">
                <h5 class="card-title">Total Vendors</h5>
                <p class="card-text">{{ total_vendors }}</p>
            </div>
        </div>
    </div>
    <div class="col-md-3 mb-3">
        <div class="card bg-success text-white stat-card">
            <div class="card-body">
                <h5 class="card-title">Total Parts</h5>
                <p class="card-text">{{ total_parts }}</p>
            </div>
        </div>
    </div>
    <div class="col-md-3 mb-3">
        <div class="card bg-info text-white stat-card">
            <div class="card-body">
                <h5 class="card-title">Total Spend</h5>
                <p class="card-text currency-value">${{ total_spend|intcomma }}</p>
            </div>
        </div>
    </div>
    <div class="col-md-3 mb-3">
        <div class="card bg-warning text-dark stat-card">
            <div class="card-body">
                <h5 class="card-title">High Risk Vendors</h5>
                <p class="card-text">{{ high_risk_vendors }}</p>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-md-8">
        <div class="card">
            <div class="card-body">
                <h2 class="card-title">Top 5 Vendors by Spend</h2>
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Vendor</th>
                            <th>Total Spend</th>
                        </tr>
                    </thead>
                    <tbody>
                        {% for vendor in top_vendors %}
                        <tr>
                            <td>{{ vendor.vendor_name }}</td>
                            <td>${{ vendor.total_spend|floatformat:0|intcomma }}</td>
                        </tr>
                        {% endfor %}
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="card">
            <div class="card-body">
                <h2 class="card-title">Quick Links</h2>
                <ul class="list-group">
                    <li class="list-group-item"><a href="{% url 'vendor_list' %}">View All Vendors</a></li>
                    <li class="list-group-item"><a href="{% url 'import_data' %}">Import Data</a></li>
                    <!-- Add more quick links as needed -->
                </ul>
            </div>
        </div>
    </div>
</div>
{% endblock %}
"""

================================================================================
File: core\templates\core\home.html
================================================================================
"""
{% extends 'base.html' %}
{% load static %}

{% block title %}Home - Vendor Management{% endblock %}

{% block content %}
<div class="container">
    <h1 class="mb-4">Vendor Management Dashboard</h1>

    <div class="row">
        <div class="col-md-3 mb-4">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Total Vendors</h5>
                    <p class="card-text display-4">{{ vendor_count }}</p>
                </div>
            </div>
        </div>
        <div class="col-md-3 mb-4">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Total Parts</h5>
                    <p class="card-text display-4">{{ part_count }}</p>
                </div>
            </div>
        </div>
        <div class="col-md-3 mb-4">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Total Spend</h5>
                    <p class="card-text display-4">${{ spend_total|floatformat:2 }}</p>
                </div>
            </div>
        </div>
        <div class="col-md-3 mb-4">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">High Risk Vendors</h5>
                    <p class="card-text display-4">{{ high_risk_count }}</p>
                </div>
            </div>
        </div>
    </div>

    <div class="row mt-4">
        <div class="col-md-6 mb-4">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Average Spend per Vendor</h5>
                    <p class="card-text display-4">${{ avg_spend_per_vendor|floatformat:2 }}</p>
                </div>
            </div>
        </div>
        <div class="col-md-6 mb-4">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Top 5 Vendors by Spend</h5>
                    <ul class="list-group">
                        {% for vendor in top_vendors %}
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            {{ vendor.vendor_name }}
                            <span class="badge bg-primary rounded-pill">${{ vendor.total_spend|floatformat:2 }}</span>
                        </li>
                        {% endfor %}
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}
"""

================================================================================
File: core\templates\core\pagination.html
================================================================================
"""
{% if is_paginated %}
<nav aria-label="Page navigation">
    <ul class="pagination justify-content-center">
        {% if page_obj.has_previous %}
            <li class="page-item"><a class="page-link" href="?page=1{% if search_query %}&search={{ search_query }}{% endif %}">&laquo; First</a></li>
            <li class="page-item"><a class="page-link" href="?page={{ page_obj.previous_page_number }}{% if search_query %}&search={{ search_query }}{% endif %}">Previous</a></li>
        {% endif %}

        <li class="page-item active"><span class="page-link">Page {{ page_obj.number }} of {{ page_obj.paginator.num_pages }}</span></li>

        {% if page_obj.has_next %}
            <li class="page-item"><a class="page-link" href="?page={{ page_obj.next_page_number }}{% if search_query %}&search={{ search_query }}{% endif %}">Next</a></li>
            <li class="page-item"><a class="page-link" href="?page={{ page_obj.paginator.num_pages }}{% if search_query %}&search={{ search_query }}{% endif %}">Last &raquo;</a></li>
        {% endif %}
    </ul>
</nav>
{% endif %}
"""

================================================================================
File: core\templates\core\part_form.html
================================================================================
"""
{% extends 'base.html' %}
{% load bootstrap4 %}

{% block content %}
<h1>{% if form.instance.pk %}Edit{% else %}Add{% endif %} Part</h1>
<form method="post">
    {% csrf_token %}
    {% bootstrap_form form %}
    {% buttons %}
        <button type="submit" class="btn btn-primary">Save</button>
        <a href="{% url 'vendor-list' %}" class="btn btn-secondary">Cancel</a>
    {% endbuttons %}
</form>
{% endblock %}
"""

================================================================================
File: core\templates\core\risk_form.html
================================================================================
"""
{% extends 'base.html' %}
{% load bootstrap4 %}

{% block content %}
<h1>{% if form.instance.pk %}Edit{% else %}Add{% endif %} Risk Assessment</h1>
<form method="post">
    {% csrf_token %}
    {% bootstrap_form form %}
    {% buttons %}
        <button type="submit" class="btn btn-primary">Save</button>
        <a href="{% url 'vendor-list' %}" class="btn btn-secondary">Cancel</a>
    {% endbuttons %}
</form>
{% endblock %}
"""

================================================================================
File: core\templates\core\spend_form.html
================================================================================
"""
{% extends 'base.html' %}
{% load bootstrap4 %}

{% block content %}
<h1>{% if form.instance.pk %}Edit{% else %}Add{% endif %} Spend</h1>
<form method="post">
    {% csrf_token %}
    {% bootstrap_form form %}
    {% buttons %}
        <button type="submit" class="btn btn-primary">Save</button>
        <a href="{% url 'vendor-list' %}" class="btn btn-secondary">Cancel</a>
    {% endbuttons %}
</form>
{% endblock %}
"""

================================================================================
File: core\templates\core\vendor_form.html
================================================================================
"""
{% extends 'base.html' %}
{% load bootstrap4 %}

{% block content %}
<h1>{% if form.instance.pk %}Edit{% else %}Add{% endif %} Vendor</h1>
<form method="post">
    {% csrf_token %}
    {% bootstrap_form form %}
    {% buttons %}
        <button type="submit" class="btn btn-primary">Save</button>
        <a href="{% url 'vendor-list' %}" class="btn btn-secondary">Cancel</a>
    {% endbuttons %}
</form>
{% endblock %}
"""

================================================================================
File: core\templates\core\vendor_list.html
================================================================================
"""
{% extends 'base.html' %}
{% load static %}

{% block extra_css %}
<style>
    .card {
        border: none;
        box-shadow: 0 0.5rem 1rem rgba(177, 140, 140, 0.15);
        margin-bottom: 1.5rem;
        border-radius: 0.75rem;
    }
    .card-header {
        background-color: #f8f9fa;
        border-bottom: none;
        padding: 1.5rem;
        border-radius: 0.75rem 0.75rem 0 0;
    }
    .card-body {
        padding: 1.5rem;
    }
    .table th {
        background-color: #007bff;
        color: white;
        border: none;
    }
    .table td {
        border-top: none;
    }
    .table-hover tbody tr:hover {
        background-color: #f1f8ff;
    }
    .vendor-name {
        color: #141516;
        text-decoration: none;
    }
    .vendor-name:hover {
        text-decoration: underline;
    }
    .badge-relationship {
        font-size: 0.85rem;
    }
</style>
{% endblock %}

{% block content %}
<h1 class="mb-4">Vendor List</h1>

<div class="card mb-4">
    <div class="card-header">
        <h5 class="card-title mb-0">Search and Filter</h5>
    </div>
    <div class="card-body">
        <form method="get" id="searchForm" class="row g-3">
            <div class="col-md-4">
                <input type="text" name="search" class="form-control" placeholder="Search vendors..." value="{{ search_query }}" oninput="submitForm()">
            </div>
            <div class="col-md-3">
                <select name="relationship_type" class="form-select" onchange="submitForm()">
                    <option value="">All Relationship Types</option>
                    {% for choice in vendor_relationship_types %}
                    <option value="{{ choice.0 }}" {% if choice.0 == relationship_type %} selected{% endif %}>{{ choice.1 }}</option>
                    {% endfor %}
                </select>
            </div>
            <div class="col-md-3">
                <select name="risk_level" class="form-select" onchange="submitForm()">
                    <option value="">All Risk Levels</option>
                    {% for choice in risk_levels %}
                    <option value="{{ choice.0 }}" {% if choice.0 == risk_level %} selected{% endif %}>{{ choice.1 }}</option>
                    {% endfor %}
                </select>
            </div>
            <div class="col-md-2">
                <button class="btn btn-secondary w-100" type="button" onclick="resetSearch()">Reset</button>
            </div>
        </form>
    </div>
</div>

<div class="card">
    <div class="card-body">
        <div class="table-responsive">
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th>Vendor Name</th>
                        <th>Vendor ID</th>
                        <th>Payment Terms</th>
                        <th>Contract Year</th>
                        <th>Relationship Type</th>
                    </tr>
                </thead>
                <tbody>
                    {% for vendor in vendors %}
                    <tr>
                        <td><a href="{% url 'vendor_profile' vendor.pk %}" class="vendor-name">{{ vendor.vendor_name }}</a></td>
                        <td>{{ vendor.vendor_id }}</td>
                        <td>{{ vendor.payment_terms }}</td>
                        <td>{{ vendor.contract_year }}</td>
                        <td>
                            <span class="badge bg-{% if vendor.relationship_type == 'DIRECT' %}primary{% else %}secondary{% endif %} badge-relationship">
                                {{ vendor.get_relationship_type_display }}
                            </span>
                        </td>
                    </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>
    </div>
</div>

{% include 'core/pagination.html' %}

<script>
    function submitForm() {
        document.getElementById('searchForm').submit();
    }
    
    function resetSearch() {
        document.getElementsByName('search')[0].value = '';
        document.getElementsByName('relationship_type')[0].selectedIndex = 0;
        document.getElementsByName('risk_level')[0].selectedIndex = 0;
        submitForm();
    }
</script>
{% endblock %}

"""

================================================================================
File: core\templates\core\vendor_profile.html
================================================================================
"""
{% extends 'base.html' %}
{% load bootstrap4 %}

{% block title %}{{ vendor.vendor_name }} - Vendor Profile{% endblock %}

{% block content %}
<div class="container">
    <h1 class="mb-4">{{ vendor.vendor_name }}</h1>
    <div class="row">
        <div class="col-md-6">
            <h2>Vendor Details</h2>
            <table class="table">
                <tr><th>Vendor ID:</th><td>{{ vendor.vendor_id }}</td></tr>
                <tr><th>Payment Terms:</th><td>{{ vendor.payment_terms }}</td></tr>
                <tr><th>Credit Limit:</th><td>${{ vendor.credit_limit|floatformat:2 }}</td></tr>
                <tr><th>Contract Year:</th><td>{{ vendor.contract_year }}</td></tr>
                <tr><th>Relationship Type:</th><td>{{ vendor.get_relationship_type_display }}</td></tr>
            </table>
        </div>
        <div class="col-md-6">
            <h2>Risk Assessment</h2>
            {% if risk %}
                <p class="alert alert-{{ risk.get_risk_level_display|lower }}">
                    Risk Level: {{ risk.get_risk_level_display }}
                </p>
            {% else %}
                <p class="alert alert-warning">No risk assessment available for this vendor.</p>
            {% endif %}
        </div>
    </div>

    <div class="row mt-4">
        <div class="col-md-6">
            <h2>Parts</h2>
            {% if parts %}
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Part Number</th>
                            <th>Buyer</th>
                            <th>Discount</th>
                        </tr>
                    </thead>
                    <tbody>
                        {% for part in parts %}
                        <tr>
                            <td>{{ part.part_number }}</td>
                            <td>{{ part.buyer }}</td>
                            <td>{{ part.discount }}%</td>
                        </tr>
                        {% endfor %}
                    </tbody>
                </table>
            {% else %}
                <p>No parts found for this vendor.</p>
            {% endif %}
        </div>
        <div class="col-md-6">
            <h2>Spend History</h2>
            {% if spends %}
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Year</th>
                            <th>Amount</th>
                        </tr>
                    </thead>
                    <tbody>
                        {% for spend in spends %}
                        <tr>
                            <td>{{ spend.year }}</td>
                            <td>${{ spend.usd_amount|floatformat:2 }}</td>
                        </tr>
                        {% endfor %}
                    </tbody>
                </table>
            {% else %}
                <p>No spend history found for this vendor.</p>
            {% endif %}
        </div>
    </div>
</div>
{% endblock %}

<div class="row mt-4">
    <div class="col-md-6">
        <h2>Spend History Chart</h2>
        <canvas id="spendChart"></canvas>
    </div>
    <div class="col-md-6">
        <h2>Parts Distribution</h2>
        <canvas id="partsChart"></canvas>
    </div>
</div>

<script>
    // Spend History Chart
    var spendCtx = document.getElementById('spendChart').getContext('2d');
    var spendChart = new Chart(spendCtx, {
        type: 'line',
        data: {
            labels: [{% for spend in spends %}'{{ spend.year }}',{% endfor %}],
            datasets: [{
                label: 'Spend Amount',
                data: [{% for spend in spends %}{{ spend.usd_amount }},{% endfor %}],
                borderColor: 'rgb(75, 192, 192)',
                tension: 0.1
            }]
        },
        options: {
            responsive: true,
            scales: {
                y: {
                    beginAtZero: true,
                    title: {
                        display: true,
                        text: 'USD Amount'
                    }
                }
            }
        }
    });

    // Parts Distribution Chart
    var partsCtx = document.getElementById('partsChart').getContext('2d');
    var partsChart = new Chart(partsCtx, {
        type: 'pie',
        data: {
            labels: [{% for part in parts %}'{{ part.part_number }}',{% endfor %}],
            datasets: [{
                data: [{% for part in parts %}1,{% endfor %}],
                backgroundColor: [
                    'rgba(255, 99, 132, 0.8)',
                    'rgba(54, 162, 235, 0.8)',
                    'rgba(255, 206, 86, 0.8)',
                    'rgba(75, 192, 192, 0.8)',
                    'rgba(153, 102, 255, 0.8)',
                ]
            }]
        },
        options: {
            responsive: true,
            plugins: {
                legend: {
                    position: 'right',
                }
            }
        }
    });
</script>
"""

================================================================================
File: data_import\admin.py
================================================================================
"""
from django.contrib import admin

# Register your models here.

"""

================================================================================
File: data_import\apps.py
================================================================================
"""
from django.apps import AppConfig


class DataImportConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'data_import'

"""

================================================================================
File: data_import\forms.py
================================================================================
"""
from django import forms


class FileUploadForm(forms.Form):
    file = forms.FileField(label="Select a CSV or Excel file")

    def clean_file(self):
        file = self.cleaned_data["file"]
        ext = file.name.split(".")[-1].lower()
        if ext not in ["csv", "xlsx", "xls"]:
            raise forms.ValidationError("Only CSV and Excel files are allowed.")
        return file

"""

================================================================================
File: data_import\import_handlers.py
================================================================================
"""
import pandas as pd
from django.db import transaction
from core.models import Vendor, Part, Spend, Risk


@transaction.atomic
def handle_uploaded_file(file):
    if file.name.endswith(".csv"):
        df = pd.read_csv(file)
    elif file.name.endswith((".xlsx", ".xls")):
        df = pd.read_excel(file)
    else:
        raise ValueError("Unsupported file format")

    records_imported = 0
    errors = []

    for _, row in df.iterrows():
        try:
            vendor, created = Vendor.objects.update_or_create(
                vendor_id=row["vendor_id"],
                defaults={
                    "vendor_name": row["vendor_name"],
                    "payment_terms": row["payment_terms"],
                    "credit_limit": row["credit_limit"],
                    "contract_year": row["contract_year"],
                    "relationship_type": row["relationship_type"],
                },
            )

            if "part_number" in row:
                Part.objects.update_or_create(
                    part_number=row["part_number"],
                    defaults={
                        "vendor": vendor,
                        "buyer": row["buyer"],
                        "discount": row["discount"],
                    },
                )

            if "spend_year" in row and "spend_amount" in row:
                Spend.objects.update_or_create(
                    vendor=vendor,
                    year=row["spend_year"],
                    defaults={"usd_amount": row["spend_amount"]},
                )

            if "risk_level" in row:
                Risk.objects.update_or_create(
                    vendor=vendor, defaults={"risk_level": row["risk_level"]}
                )

            records_imported += 1
        except Exception as e:
            errors.append(f"Error in row {_}: {str(e)}")

    return records_imported, errors

"""

================================================================================
File: data_import\models.py
================================================================================
"""
from django.db import models

# Create your models here.

"""

================================================================================
File: data_import\tests.py
================================================================================
"""
from django.test import TestCase

# Create your tests here.

"""

================================================================================
File: data_import\urls.py
================================================================================
"""
from django.urls import path
from .views import import_data

urlpatterns = [
    path("", import_data, name="import_data"),
]

"""

================================================================================
File: data_import\views.py
================================================================================
"""
from django.shortcuts import render, redirect
from django.contrib import messages
from .forms import FileUploadForm
from .import_handlers import handle_uploaded_file

def import_data(request):
    if request.method == 'POST':
        form = FileUploadForm(request.POST, request.FILES)
        if form.is_valid():
            uploaded_file = request.FILES['file']
            try:
                records_imported, errors = handle_uploaded_file(uploaded_file)
                if errors:
                    for error in errors:
                        messages.warning(request, error)
                messages.success(request, f'Successfully imported {records_imported} records.')
                return redirect('vendor_list')
            except Exception as e:
                messages.error(request, f'Error importing file: {str(e)}')
    else:
        form = FileUploadForm()
    return render(request, 'data_import/import.html', {'form': form})
"""

================================================================================
File: data_import\__init__.py
================================================================================
"""

"""

================================================================================
File: data_import\migrations\__init__.py
================================================================================
"""

"""

================================================================================
File: data_import\templates\data_import\import.html
================================================================================
"""
{% extends 'base.html' %}
{% load bootstrap4 %}

{% block content %}
<h1>Import Data</h1>
<form method="post" enctype="multipart/form-data">
    {% csrf_token %}
    {% bootstrap_form form %}
    {% buttons %}
    <button type="submit" class="btn btn-primary">Upload</button>
    <a href="{% url 'vendor_list' %}" class="btn btn-secondary">Cancel</a>
    {% endbuttons %}
</form>
{% endblock %}
"""

================================================================================
File: templates\base.html
================================================================================
"""
{% load bootstrap4 %}
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}Vendor Management System{% endblock %}</title>
    {% bootstrap_css %}
    {% bootstrap_javascript jquery='full' %}
</head>

<body>
    <nav class="navbar navbar-expand-lg navbar-light bg-light">
        <a class="navbar-brand" href="{% url 'dashboard' %}">Vendor Management</a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav"
            aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav mr-auto">
                <li class="nav-item">
                    <a class="nav-link" href="{% url 'dashboard' %}">Home</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="{% url 'vendor_list' %}">Vendors</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="{% url 'import_data' %}">Import Data</a>
                </li>
            </ul>
            <ul class="navbar-nav">
                {% if user.is_authenticated %}
                <li class="nav-item">
                    <span class="navbar-text mr-3">Welcome, {{ user.username }}</span>
                </li>
                <li class="nav-item">
                    <form method="post" action="{% url 'logout' %}" class="form-inline">
                        {% csrf_token %}
                        <button type="submit" class="btn btn-link nav-link">Logout</button>
                    </form>
                </li>
                {% else %}
                <li class="nav-item">
                    <a class="nav-link" href="{% url 'login' %}">Login</a>
                </li>
                {% endif %}
            </ul>
        </div>
    </nav>
    <div class="container mt-4">
        {% bootstrap_messages %}
        {% block content %}{% endblock %}
    </div>
</body>

</html>
"""

================================================================================
File: templates\registration\login.html
================================================================================
"""
{% extends 'base.html' %}
{% load bootstrap4 %}

{% block content %}
<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <h2 class="mt-5 mb-3">Login</h2>
            <form method="post">
                {% csrf_token %}
                {% bootstrap_form form %}
                <button type="submit" class="btn btn-primary">Login</button>
            </form>
        </div>
    </div>
</div>
{% endblock %}
"""

================================================================================
File: vendor_management\asgi.py
================================================================================
"""
"""
ASGI config for vendor_management project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'vendor_management.settings')

application = get_asgi_application()

"""

================================================================================
File: vendor_management\settings.py
================================================================================
"""
"""
Django settings for vendor_management project.

Generated by 'django-admin startproject' using Django 5.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-(suu2h)7c%z26@zx(qecsctq(+))pyy0db$3que8371@%cnxjf"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.humanize",
    # My apps
    "core",
    "data_import",
    "bootstrap4",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    # "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "vendor_management.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],  # Make sure this line is present
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "vendor_management.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = "/static/"
STATICFILES_DIRS = [
    BASE_DIR / "static",
]
STATIC_ROOT = BASE_DIR / "staticfiles"

MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

LOGIN_URL = "login"
LOGIN_REDIRECT_URL = "dashboard"
LOGOUT_REDIRECT_URL = "login"

CSRF_COOKIE_SECURE = True
SESSION_COOKIE_SECURE = True

CSRF_COOKIE_HTTPONLY = False

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
        },
    },
    "root": {
        "handlers": ["console"],
        "level": "DEBUG",
    },
}

"""

================================================================================
File: vendor_management\urls.py
================================================================================
"""
"""
URL configuration for vendor_management project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/5.0/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""

# core/models.py
from django.contrib import admin
from django.urls import path, include
from django.contrib.auth import views as auth_views
from django.views.generic import RedirectView

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('core.urls')),
    path('import/', include('data_import.urls')),
    path('accounts/login/', auth_views.LoginView.as_view(), name='login'),
    path('accounts/logout/', auth_views.LogoutView.as_view(next_page='login'), name='logout'),
]

"""

================================================================================
File: vendor_management\wsgi.py
================================================================================
"""
"""
WSGI config for vendor_management project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'vendor_management.settings')

application = get_wsgi_application()

"""

================================================================================
File: vendor_management\__init__.py
================================================================================
"""

"""