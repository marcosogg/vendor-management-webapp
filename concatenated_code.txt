Directory structure of included files:
└── vendor-management-webapp
    └── manage.py
    └── core
        └── core/
            └── admin.py
            └── apps.py
            └── forms.py
            └── import_models.py
            └── models.py
            └── risk_assessment.py
            └── tests.py
            └── urls.py
            └── utils.py
            └── views.py
            └── __init__.py
            └── management/
                └── commands/
                    └── clear_db.py
                    └── describe_models.py
                    └── populate_db.py
                    └── recalculate_risks.py
                    └── __pycache__/
            └── migrations/
                └── 0001_initial.py
                └── 0002_part_created_at_part_updated_at_risk_created_at_and_more.py
                └── 0003_alter_vendor_relationship_type_activity.py
                └── 0004_rename_updated_at_risk_last_updated_and_more.py
                └── 0005_risk_last_assessment_date_risk_risk_score_and_more.py
                └── 0006_vendor_country.py
                └── 0007_remove_risk_last_assessment_date_and_more.py
                └── 0008_vendor_average_discount_vendor_contract_type_and_more.py
                └── __init__.py
                └── __pycache__/
            └── templates/
                └── core/
                    └── dashboard.html
                    └── home.html
                    └── pagination.html
                    └── part_form.html
                    └── risk_form.html
                    └── search_results.html
                    └── skeleton-loader.html
                    └── spend_form.html
                    └── vendor_form.html
                    └── vendor_list.html
                    └── vendor_profile.html
            └── __pycache__/
    └── data_import
        └── data_import/
            └── admin.py
            └── apps.py
            └── forms.py
            └── import_handlers.py
            └── models.py
            └── tests.py
            └── urls.py
            └── views.py
            └── __init__.py
            └── migrations/
                └── 0001_initial.py
                └── 0002_vendorimport_contract_type.py
                └── __init__.py
                └── __pycache__/
            └── templates/
                └── data_import/
                    └── import.html
            └── __pycache__/
    └── templates
        └── templates/
            └── base.html
            └── registration/
                └── login.html
    └── vendor_management
        └── vendor_management/
            └── asgi.py
            └── settings.py
            └── urls.py
            └── wsgi.py
            └── __init__.py
            └── __pycache__/



================================================================================
File: manage.py
================================================================================
"""
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'vendor_management.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()

"""

================================================================================
File: core\admin.py
================================================================================
"""
# core/admin.py
from django.contrib import admin
from .models import Vendor, Part, Spend, Risk

admin.site.register(Vendor)
admin.site.register(Part)
admin.site.register(Spend)
admin.site.register(Risk)

"""

================================================================================
File: core\apps.py
================================================================================
"""
from django.apps import AppConfig


class CoreConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'core'

"""

================================================================================
File: core\forms.py
================================================================================
"""
from django import forms
from .models import Vendor, Part, Spend, Risk

class VendorForm(forms.ModelForm):
    class Meta:
        model = Vendor
        fields = ['vendor_name', 'vendor_id', 'payment_terms', 'credit_limit', 'contract_year', 'relationship_type']

class PartForm(forms.ModelForm):
    class Meta:
        model = Part
        fields = ['part_number', 'vendor', 'buyer', 'discount']

class SpendForm(forms.ModelForm):
    class Meta:
        model = Spend
        fields = ['vendor', 'year', 'usd_amount']

class RiskForm(forms.ModelForm):
    class Meta:
        model = Risk
        fields = ['vendor', 'risk_level']

"""

================================================================================
File: core\import_models.py
================================================================================
"""
# core/import_models.py

from django.db import models


class DiscountImport(models.Model):
    part_number = models.CharField(max_length=50)
    discount = models.DecimalField(max_digits=5, decimal_places=2)


class SpendImport(models.Model):
    vendor_id = models.CharField(max_length=50)
    usd_amount = models.DecimalField(max_digits=12, decimal_places=2)
    year = models.IntegerField()


class VendorImport(models.Model):
    part_number = models.CharField(max_length=50)
    vendor_id = models.CharField(max_length=50)
    vendor = models.CharField(max_length=200)
    buyer = models.CharField(max_length=100)
    payment_terms = models.CharField(max_length=100)
    credit_limit = models.DecimalField(max_digits=10, decimal_places=2)
    contract_year = models.IntegerField()
    relationship_type = models.CharField(max_length=50)

"""

================================================================================
File: core\models.py
================================================================================
"""
from django.db import models
from django.db.models import Avg, Sum
from django.utils import timezone
from django.core.validators import MinValueValidator, MaxValueValidator
from django.contrib.auth.models import User


class Vendor(models.Model):
    RELATIONSHIP_TYPE_CHOICES = [
        ("DIRECT", "Direct"),
        ("THIRD PARTY", "Third Party"),
    ]

    CONTRACT_TYPE_CHOICES = [
        ("FIXED", "Fixed Price"),
        ("TIME", "Time and Materials"),
        ("COST", "Cost Plus"),
    ]

    vendor_name = models.CharField(max_length=200)
    vendor_id = models.CharField(max_length=50, unique=True)
    payment_terms = models.CharField(max_length=100)
    country = models.CharField(max_length=2, blank=True, null=True)
    average_discount = models.DecimalField(max_digits=5, decimal_places=2, default=0)
    contract_type = models.CharField(
        max_length=10,
        choices=CONTRACT_TYPE_CHOICES,
        default="FIXED",
    )
    rating = models.DecimalField(
        max_digits=3,
        decimal_places=2,
        default=0,
        validators=[MinValueValidator(0), MaxValueValidator(5)],
    )
    credit_limit = models.DecimalField(
        max_digits=10, decimal_places=2, validators=[MinValueValidator(0)]
    )
    contract_year = models.IntegerField(
        validators=[MinValueValidator(1900), MaxValueValidator(2100)]
    )
    relationship_type = models.CharField(
        max_length=50,
        choices=RELATIONSHIP_TYPE_CHOICES,
    )
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def save(self, *args, **kwargs):
        self.payment_terms = str(self.payment_terms)
        super().save(*args, **kwargs)

    def update_performance_metrics(self):
        # Update average discount
        avg_discount = self.parts.aggregate(Avg("discount"))["discount__avg"]
        self.average_discount = avg_discount if avg_discount is not None else 0

        # Update rating based on spend
        current_year = timezone.now().year
        total_spend = self.spends.filter(year=current_year).aggregate(
            Sum("usd_amount")
        )["usd_amount__sum"]
        if total_spend:
            # This is a simple rating calculation, you might want to adjust it based on your specific requirements
            self.rating = min(
                5, total_spend / 1000000
            )  # 1 point for every million spent, max 5
        else:
            self.rating = 0

        self.save()

    def __str__(self):
        return f"{self.vendor_name} ({self.vendor_id})"


class Part(models.Model):
    part_number = models.CharField(max_length=50, unique=True)
    vendor = models.ForeignKey(Vendor, on_delete=models.CASCADE, related_name="parts")
    buyer = models.CharField(max_length=100)
    discount = models.DecimalField(
        max_digits=5,
        decimal_places=2,
        validators=[MinValueValidator(0), MaxValueValidator(100)],
    )
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"{self.part_number} - {self.vendor.vendor_name}"


class Spend(models.Model):
    vendor = models.ForeignKey(Vendor, on_delete=models.CASCADE, related_name="spends")
    year = models.IntegerField(
        validators=[MinValueValidator(1900), MaxValueValidator(2100)]
    )
    usd_amount = models.DecimalField(
        max_digits=12, decimal_places=2, validators=[MinValueValidator(0)]
    )
    relationship_type = models.CharField(
        max_length=50,
        choices=Vendor.RELATIONSHIP_TYPE_CHOICES,
        default="DIRECT",
    )
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        unique_together = ["vendor", "year"]

    def __str__(self):
        return f"{self.vendor.vendor_name} - {self.year}: ${self.usd_amount}"

    def save(self, *args, **kwargs):
        # Ensure relationship_type matches the vendor's relationship_type
        self.relationship_type = self.vendor.relationship_type
        super().save(*args, **kwargs)


class Risk(models.Model):
    vendor = models.OneToOneField(Vendor, on_delete=models.CASCADE, related_name="risk")
    risk_level = models.CharField(
        max_length=50,
        choices=[("LOW", "Low"), ("MEDIUM", "Medium"), ("HIGH", "High")],
        default="MEDIUM",
    )
    total_score = models.IntegerField(
        validators=[MinValueValidator(0), MaxValueValidator(100)], default=0
    )
    payment_terms_score = models.IntegerField(
        validators=[MinValueValidator(0), MaxValueValidator(35)], default=0
    )
    spend_score = models.IntegerField(
        validators=[MinValueValidator(0), MaxValueValidator(25)], default=0
    )
    average_discount_score = models.IntegerField(
        validators=[MinValueValidator(0), MaxValueValidator(15)], default=0
    )
    contract_score = models.IntegerField(
        validators=[MinValueValidator(0), MaxValueValidator(15)], default=0
    )
    relationship_type_score = models.IntegerField(
        validators=[MinValueValidator(0), MaxValueValidator(10)], default=0
    )
    last_updated = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"{self.vendor.vendor_name} - Risk: {self.get_risk_level_display()}"


class Activity(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    action = models.CharField(max_length=255)
    details = models.TextField()
    date = models.DateTimeField(auto_now_add=True)

    class Meta:
        ordering = ["-date"]

"""

================================================================================
File: core\risk_assessment.py
================================================================================
"""
from core import models
from django.db.models import Sum, Avg
from core.models import Vendor, Risk, Spend, Part


def calculate_risk_score(vendor):
    payment_terms_score = calculate_payment_terms_score(vendor.payment_terms)
    spend_score = calculate_spend_score(vendor)
    average_discount_score = calculate_average_discount_score(vendor)
    contract_score = calculate_contract_score(vendor.contract_year)
    relationship_type_score = calculate_relationship_type_score(
        vendor.relationship_type
    )

    total_score = (
        payment_terms_score
        + spend_score
        + average_discount_score
        + contract_score
        + relationship_type_score
    )

    risk_level = get_risk_level(total_score)

    return {
        "risk_level": risk_level,
        "total_score": total_score,
        "payment_terms_score": payment_terms_score,
        "spend_score": spend_score,
        "average_discount_score": average_discount_score,
        "contract_score": contract_score,
        "relationship_type_score": relationship_type_score,
    }


def calculate_payment_terms_score(payment_terms):
    payment_terms = str(payment_terms)  # Ensure payment_terms is a string
    if payment_terms == "PPAY":
        return 0
    elif payment_terms.startswith("Net "):
        try:
            days = int(payment_terms.split()[1])
            return 35 if days >= 30 else 5
        except (IndexError, ValueError):
            return 5  # Default to low score if we can't parse the number
    else:
        return 5  # Default to low score for unknown terms


def calculate_spend_score(vendor):
    SPEND_THRESHOLD = 1000000  # Example threshold, adjust as needed
    total_spend = (
        Spend.objects.filter(vendor=vendor).aggregate(Sum("usd_amount"))[
            "usd_amount__sum"
        ]
        or 0
    )
    return 25 if total_spend > SPEND_THRESHOLD else 0


def calculate_average_discount_score(vendor):
    avg_discount = (
        Part.objects.filter(vendor=vendor).aggregate(Avg("discount"))["discount__avg"]
        or 0
    )
    return 15 if avg_discount > 0 else 0


def calculate_contract_score(contract_year):
    return 15 if contract_year else 0


def calculate_relationship_type_score(relationship_type):
    return 10 if relationship_type == "DIRECT" else 0


def get_risk_level(total_score):
    if total_score <= 30:
        return "LOW"
    elif total_score <= 70:
        return "MEDIUM"
    else:
        return "HIGH"


def update_vendor_risk(vendor):
    risk_data = calculate_risk_score(vendor)
    risk, created = Risk.objects.update_or_create(vendor=vendor, defaults=risk_data)
    return risk

"""

================================================================================
File: core\tests.py
================================================================================
"""
from django.test import TestCase
from django.urls import reverse
from .models import Vendor, Part, Spend, Risk

class VendorModelTest(TestCase):
    def setUp(self):
        self.vendor = Vendor.objects.create(
            vendor_name="Test Vendor",
            vendor_id="TV001",
            payment_terms="Net 30",
            credit_limit=10000,
            contract_year=2023,
            relationship_type="STRATEGIC"
        )

    def test_vendor_creation(self):
        self.assertTrue(isinstance(self.vendor, Vendor))
        self.assertEqual(self.vendor.__str__(), "Test Vendor (TV001)")

class VendorListViewTest(TestCase):
    def setUp(self):
        Vendor.objects.create(
            vendor_name="Vendor 1",
            vendor_id="V001",
            payment_terms="Net 30",
            credit_limit=10000,
            contract_year=2023,
            relationship_type="STRATEGIC"
        )
        Vendor.objects.create(
            vendor_name="Vendor 2",
            vendor_id="V002",
            payment_terms="Net 60",
            credit_limit=20000,
            contract_year=2023,
            relationship_type="PREFERRED"
        )

    def test_view_url_exists_at_desired_location(self):
        response = self.client.get('/vendors/')
        self.assertEqual(response.status_code, 200)

    def test_view_url_accessible_by_name(self):
        response = self.client.get(reverse('vendor_list'))
        self.assertEqual(response.status_code, 200)

    def test_view_uses_correct_template(self):
        response = self.client.get(reverse('vendor_list'))
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'core/vendor_list.html')

    def test_search_functionality(self):
        response = self.client.get(reverse('vendor_list'), {'search': 'Vendor 1'})
        self.assertContains(response, 'Vendor 1')
        self.assertNotContains(response, 'Vendor 2')

"""

================================================================================
File: core\urls.py
================================================================================
"""
from django.urls import path
from .views import (
    DashboardView,
    VendorListView,
    VendorProfileView,
    global_search,
    dashboard_data,
)

urlpatterns = [
    path("", DashboardView.as_view(), name="dashboard"),
    path("api/dashboard-data/", dashboard_data, name="dashboard_data"),
    path("vendors/", VendorListView.as_view(), name="vendor_list"),
    path("vendors/<int:pk>/", VendorProfileView.as_view(), name="vendor_profile"),
    path("search/", global_search, name="global_search"),
]

"""

================================================================================
File: core\utils.py
================================================================================
"""
import logging

logger = logging.getLogger(__name__)


def log_error(func):
    def wrapper(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except Exception as e:
            logger.error(f"Error in {func.__name__}: {str(e)}")
            raise

    return wrapper

"""

================================================================================
File: core\views.py
================================================================================
"""
from django.http import JsonResponse
from django.views.generic import ListView, DetailView, TemplateView
from django.views.generic.edit import CreateView, UpdateView
from django.db.models import Sum, Count, Q, Avg
from django.urls import reverse_lazy, reverse
from django.utils.decorators import method_decorator
from django.views.decorators.cache import cache_page
from django.contrib.auth.mixins import LoginRequiredMixin
from django.contrib.auth.decorators import login_required
from django.utils.html import escape
from django.core.exceptions import ValidationError
from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger
from django.shortcuts import render
from django.contrib import messages
from .models import Vendor, Part, Spend, Risk, Activity
from .forms import VendorForm
from .utils import log_error

import logging
import math

logger = logging.getLogger(__name__)


@method_decorator(login_required, name="dispatch")
class DashboardView(LoginRequiredMixin, TemplateView):
    template_name = "core/dashboard.html"

    @log_error
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)

        # Total vendors and parts
        context["total_vendors"] = Vendor.objects.count()
        context["total_parts"] = Part.objects.count()

        # Total spend
        total_spend = Spend.objects.aggregate(total=Sum("usd_amount"))["total"] or 0
        context["total_spend"] = self.format_currency(total_spend)

        # Average risk score
        avg_risk_score = (
            Risk.objects.aggregate(Avg("total_score"))["total_score__avg"] or 0
        )
        context["avg_risk_score"] = round(avg_risk_score, 2)

        # High risk vendors
        context["high_risk_vendors"] = Vendor.objects.filter(
            risk__risk_level="HIGH"
        ).count()

        # Top vendors by spend
        context["top_vendors"] = Vendor.objects.annotate(
            total_spend=Sum("spends__usd_amount")
        ).order_by("-total_spend")[:5]

        # Recent activities
        context["recent_activities"] = Activity.objects.all().order_by("-date")[:10]

        return context

    def format_currency(self, amount):
        if amount >= 1_000_000_000:
            return f"${amount / 1_000_000_000:.2f}B"
        elif amount >= 1_000_000:
            return f"${amount / 1_000_000:.2f}M"
        elif amount >= 1_000:
            return f"${amount / 1_000:.2f}K"
        else:
            return f"${amount:,.2f}"


class VendorListView(LoginRequiredMixin, ListView):
    model = Vendor
    template_name = "core/vendor_list.html"
    context_object_name = "vendors"
    paginate_by = 10

    def get_queryset(self):
        queryset = super().get_queryset().select_related("risk")

        sort_by = self.request.GET.get("sort_by", "vendor_name")
        sort_order = self.request.GET.get("sort_order", "asc")
        if sort_order == "desc":
            sort_by = f"-{sort_by}"
        queryset = queryset.order_by(sort_by)

        search_query = self.request.GET.get("search", "")
        relationship_type = self.request.GET.get("relationship_type", "")
        risk_level = self.request.GET.get("risk_level", "")

        if search_query:
            queryset = queryset.filter(
                Q(vendor_name__icontains=search_query)
                | Q(vendor_id__icontains=search_query)
            )

        if relationship_type:
            queryset = queryset.filter(relationship_type=relationship_type)

        if risk_level:
            queryset = queryset.filter(risk__risk_level=risk_level)

        return queryset

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["search_query"] = self.request.GET.get("search", "")
        context["relationship_type"] = self.request.GET.get("relationship_type", "")
        context["risk_level"] = self.request.GET.get("risk_level", "")
        context["sort_by"] = self.request.GET.get("sort_by", "vendor_name")
        context["sort_order"] = self.request.GET.get("sort_order", "asc")
        context["vendor_relationship_types"] = Vendor._meta.get_field(
            "relationship_type"
        ).choices
        context["risk_levels"] = Risk._meta.get_field("risk_level").choices
        return context


@method_decorator(login_required, name="dispatch")
class VendorProfileView(LoginRequiredMixin, DetailView):
    model = Vendor
    template_name = "core/vendor_profile.html"
    context_object_name = "vendor"

    @log_error
    def get_queryset(self):
        return (
            super()
            .get_queryset()
            .prefetch_related("parts", "spends")
            .select_related("risk")
        )

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        vendor = self.object
        context["parts"] = vendor.parts.all()
        context["spends"] = vendor.spends.all().order_by("-year")

        avg_discount = vendor.parts.aggregate(Avg("discount"))["discount__avg"]
        context["avg_discount"] = (
            round(avg_discount, 2) if avg_discount is not None else 0
        )

        context["risk"] = vendor.risk

        if vendor.risk.risk_level == "HIGH":
            messages.warning(
                self.request,
                f"Warning: {vendor.vendor_name} is classified as a high-risk vendor.",
            )

        return context


@method_decorator(login_required, name="dispatch")
class VendorCreateView(LoginRequiredMixin, CreateView):
    model = Vendor
    form_class = VendorForm
    template_name = "core/vendor_form.html"
    success_url = reverse_lazy("vendor_list")

    @log_error
    def form_valid(self, form):
        response = super().form_valid(form)
        Risk.objects.create(vendor=self.object, risk_level="LOW")
        return response


@method_decorator(login_required, name="dispatch")
class VendorUpdateView(LoginRequiredMixin, UpdateView):
    model = Vendor
    form_class = VendorForm
    template_name = "core/vendor_form.html"
    success_url = reverse_lazy("vendor_list")

    @log_error
    def form_valid(self, form):
        return super().form_valid(form)


def global_search(request):
    query = request.GET.get("q")
    results = []
    if query:
        vendor_results = Vendor.objects.filter(
            Q(vendor_name__icontains=query) | Q(vendor_id__icontains=query)
        )
        part_results = Part.objects.filter(part_number__icontains=query)
        spend_results = Spend.objects.filter(vendor__vendor_name__icontains=query)

        for vendor in vendor_results:
            results.append(
                {
                    "type": "Vendor",
                    "title": vendor.vendor_name,
                    "description": f"Vendor ID: {vendor.vendor_id}",
                    "url": reverse("vendor_profile", kwargs={"pk": vendor.pk}),
                }
            )

        for part in part_results:
            results.append(
                {
                    "type": "Part",
                    "title": part.part_number,
                    "description": f"Vendor: {part.vendor.vendor_name}",
                    "url": reverse("vendor_profile", kwargs={"pk": part.vendor.pk}),
                }
            )

        for spend in spend_results:
            results.append(
                {
                    "type": "Spend",
                    "title": f"Spend for {spend.vendor.vendor_name}",
                    "description": f"Year: {spend.year}, Amount: ${spend.usd_amount:,.2f}",
                    "url": reverse("vendor_profile", kwargs={"pk": spend.vendor.pk}),
                }
            )

    return render(
        request, "core/search_results.html", {"query": query, "results": results}
    )


def vendor_performance(request):
    performance_data = Vendor.objects.annotate(
        avg_rating=Avg("rating"), avg_discount=Avg("average_discount")
    ).values("avg_rating", "avg_discount")
    return JsonResponse(list(performance_data), safe=False)


def contract_type_distribution(request):
    contract_data = Vendor.objects.values("contract_type").annotate(
        count=Count("contract_type")
    )
    return JsonResponse(list(contract_data), safe=False)


def format_currency(amount):
    if amount >= 1_000_000_000:
        return f"${amount / 1_000_000_000:.2f}B"
    elif amount >= 1_000_000:
        return f"${amount / 1_000_000:.2f}M"
    elif amount >= 1_000:
        return f"${amount / 1_000:.2f}K"
    else:
        return f"${amount:,.2f}"


def dashboard_data(request):
    try:
        # Fetch and calculate all required data
        risk_distribution = list(
            Risk.objects.values("risk_level").annotate(count=Count("risk_level"))
        )

        spend_by_year = list(
            Spend.objects.values("year").annotate(total_spend=Sum("usd_amount"))
        )
        total_spend = sum(
            item["total_spend"] for item in spend_by_year if item["total_spend"]
        )

        spend_by_relationship = list(
            Spend.objects.values("relationship_type").annotate(
                total_spend=Sum("usd_amount")
            )
        )

        vendor_performance = Vendor.objects.aggregate(
            avg_rating=Avg("rating"), avg_discount=Avg("average_discount")
        )

        contract_distribution = list(
            Vendor.objects.values("contract_type").annotate(
                count=Count("contract_type")
            )
        )

        geographical_distribution = list(
            Vendor.objects.values("country").annotate(count=Count("country"))
        )

        high_risk_vendors = Vendor.objects.filter(risk__risk_level="HIGH").count()

        data = {
            "risk_distribution": list(
                Risk.objects.values("risk_level").annotate(count=Count("risk_level"))
            ),
            "total_spend": format_currency(total_spend),
            "spend_by_year": list(
                Spend.objects.values("year").annotate(total_spend=Sum("usd_amount"))
            ),
            "spend_by_relationship": list(
                Spend.objects.values("relationship_type").annotate(
                    total_spend=Sum("usd_amount")
                )
            ),
            "vendor_performance": Vendor.objects.aggregate(
                avg_rating=Avg("rating"), avg_discount=Avg("average_discount")
            ),
            "contract_distribution": list(
                Vendor.objects.values("contract_type").annotate(
                    count=Count("contract_type")
                )
            ),
            "geographical_distribution": list(
                Vendor.objects.values("country").annotate(count=Count("country"))
            ),
            "high_risk_vendors": Vendor.objects.filter(risk__risk_level="HIGH").count(),
        }
        logger.info(f"Dashboard data: {data}")
        return JsonResponse(data)
    except Exception as e:
        logger.error(f"Error fetching dashboard data: {str(e)}")
        return JsonResponse(
            {"error": "An error occurred while fetching dashboard data"}, status=500
        )


def dashboard(request):
    context = {
        "total_vendors": Vendor.objects.count(),
        "total_spend": Spend.objects.aggregate(total=Sum("usd_amount"))["total"],
        "avg_risk_score": Risk.objects.aggregate(avg_score=Avg("total_score"))[
            "avg_score"
        ],
        "recent_activities": Activity.objects.all().order_by("-date")[:10],
    }
    return render(request, "core/dashboard.html", context)


def risk_distribution(request):
    risk_data = Risk.objects.values("risk_level").annotate(count=Count("risk_level"))
    return JsonResponse(list(risk_data), safe=False)

"""

================================================================================
File: core\__init__.py
================================================================================
"""

"""

================================================================================
File: core\management\commands\clear_db.py
================================================================================
"""
from django.core.management.base import BaseCommand
from django.apps import apps
from django.db import connection

class Command(BaseCommand):
    help = 'Clears all data from all tables in the database'

    def handle(self, *args, **kwargs):
        # Get all models
        models = apps.get_models()

        with connection.cursor() as cursor:
            # Disable foreign key checks
            if connection.vendor == 'sqlite':
                cursor.execute('PRAGMA foreign_keys = OFF;')
            
            for model in models:
                table_name = model._meta.db_table
                self.stdout.write(f'Clearing data from {table_name}')
                cursor.execute(f'DELETE FROM {table_name};')
                
                # Reset auto-increment counters for SQLite
                if connection.vendor == 'sqlite':
                    cursor.execute(f"DELETE FROM sqlite_sequence WHERE name='{table_name}';")

            # Re-enable foreign key checks
            if connection.vendor == 'sqlite':
                cursor.execute('PRAGMA foreign_keys = ON;')

        self.stdout.write(self.style.SUCCESS('Successfully cleared all data from the database'))

"""

================================================================================
File: core\management\commands\describe_models.py
================================================================================
"""
from django.core.management.base import BaseCommand
from django.apps import apps

class Command(BaseCommand):
    help = 'Describes the structure of all models in the project'

    def handle(self, *args, **options):
        for model in apps.get_models():
            self.stdout.write(self.style.SUCCESS(f'\nModel: {model.__name__}'))
            self.stdout.write('Fields:')
            for field in model._meta.fields:
                self.stdout.write(f'  - {field.name}: {field.get_internal_type()}')
            self.stdout.write('Relationships:')
            for field in model._meta.many_to_many:
                self.stdout.write(f'  - {field.name}: ManyToManyField to {field.related_model.__name__}')
            for related_object in model._meta.related_objects:
                self.stdout.write(f'  - {related_object.name}: {related_object.get_internal_type()} from {related_object.related_model.__name__}')

"""

================================================================================
File: core\management\commands\populate_db.py
================================================================================
"""
# core/management/commands/populate_db.py

from django.core.management.base import BaseCommand
from django.db import transaction
from core.models import Vendor, Part, Spend, Risk
from django.utils import timezone
import random
from decimal import Decimal

class Command(BaseCommand):
    help = "Populates the database with sample data for testing"

    @transaction.atomic
    def handle(self, *args, **kwargs):0	494775.45	2024	DIRECT	2024-07-27 16:29:39.408634	2024-07-27 16:29:39.408634
    8	Staples Promotional (Accenture Store Card - USD)	STAPACUS	N30	1585622.2	2024	THIRD PARTY
        self.stdout.write("Populating database...")

        # Sample data
        sample_data = [
            ("EC00-1800FLOW-US-USD-25", "1800FL", "1800 FLOWERS", "B04", "N29"),
            ("EC00-1800FLOW-US-USD-50", "1800FL", "1800 FLOWERS", "B04", "N29"),
            (
                "EC00-1800PETS-US-USD-50",
                "PETSUN",
                "TABcom, LLC (DBA – petsupplies.com)",
                "B05",
                "N30",
            ),
            ("EC00-85CAFE-CN-CNY-20", "DATATR02", "DATATRADE LTD", "DAT", "FLOT"),
            (
                "EC00-A101-TR-TRY-1000",
                "SANMAG",
                "Bigbrands E-Ticket Hizmetleri ve ihract",
                "B08",
                "N5",
            ),
            (
                "EC00-A101-TR-TRY-250",
                "SANMAG",
                "Bigbrands E-Ticket Hizmetleri ve ihract",
                "B08",
                "N5",
            ),
            (
                "EC00-ABBVIE-US-USD-25",
                "BOUNDL",
                "Overture Promotions, Inc.",
                "B04",
                "N29",
            ),
            (
                "EC00-ACCENROW-US-USD-25",
                "BRANDA02",
                "Brand Addition (Accenture)",
                "B08",
                "N30",
            ),
            (
                "EC00-ACCENTUR-CA-CAD-25",
                "STAPACCA",
                "Staples Promotional Canada (Accenture Store Card)",
                "B08",
                "N30",
            ),
            (
                "EC00-ACCENTUR-US-USD-25",
                "STAPACUS",
                "Staples Promotional (Accenture Store Card - USD)",
                "B08",
                "N30",
            ),
        ]

        for part_number, vendor_id, vendor_name, buyer_id, terms in sample_data:
            # Create or update vendor
            vendor, _ = Vendor.objects.update_or_create(
                vendor_id=vendor_id,
                defaults={
                    "vendor_name": vendor_name,
                    "payment_terms": terms,
                    "credit_limit": Decimal(round(random.uniform(100000, 2000000), 2)),
                    "contract_year": timezone.now().year,
                    "relationship_type": random.choice(["DIRECT", "THIRD PARTY"]),
                },
            )

            # Create or update part
            Part.objects.update_or_create(
                part_number=part_number,
                defaults={
                    "vendor": vendor,
                    "buyer": buyer_id,
                    "discount": Decimal(round(random.uniform(0, 100), 2)),
                },
            )

            # Create or update spend data for the last 3 years
            current_year = timezone.now().year
            for year in range(current_year - 2, current_year + 1):
                Spend.objects.update_or_create(
                    vendor=vendor,
                    year=year,
                    defaults={
                        "usd_amount": Decimal(round(random.uniform(10000, 1000000), 2)),
                    },
                )

            # Create or update risk data
            Risk.objects.update_or_create(
                vendor=vendor,
                defaults={
                    "risk_level": random.choice(["LOW", "MEDIUM", "HIGH"]),
                },
            )

        self.stdout.write(self.style.SUCCESS("Database successfully populated!"))

"""

================================================================================
File: core\management\commands\recalculate_risks.py
================================================================================
"""
from django.core.management.base import BaseCommand
from core.models import Vendor
from core.risk_assessment import update_vendor_risk


class Command(BaseCommand):
    help = "Recalculates risk for all vendors"

    def handle(self, *args, **options):
        vendors = Vendor.objects.all()
        total = vendors.count()

        self.stdout.write(f"Recalculating risks for {total} vendors...")

        for i, vendor in enumerate(vendors, 1):
            risk = update_vendor_risk(vendor)
            self.stdout.write(
                f"[{i}/{total}] Updated risk for {vendor.vendor_name}: {risk.risk_level}"
            )

        self.stdout.write(
            self.style.SUCCESS("Risk recalculation completed successfully.")
        )

"""

================================================================================
File: core\migrations\0001_initial.py
================================================================================
"""
# Generated by Django 5.0.7 on 2024-07-26 18:11

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Vendor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vendor_name', models.CharField(max_length=200)),
                ('vendor_id', models.CharField(max_length=50, unique=True)),
                ('payment_terms', models.CharField(max_length=100)),
                ('credit_limit', models.DecimalField(decimal_places=2, max_digits=10)),
                ('contract_year', models.IntegerField()),
                ('relationship_type', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Risk',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('risk_level', models.CharField(max_length=50)),
                ('vendor', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='risk', to='core.vendor')),
            ],
        ),
        migrations.CreateModel(
            name='Part',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('part_number', models.CharField(max_length=50, unique=True)),
                ('buyer', models.CharField(max_length=100)),
                ('discount', models.DecimalField(decimal_places=2, max_digits=5)),
                ('vendor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='parts', to='core.vendor')),
            ],
        ),
        migrations.CreateModel(
            name='Spend',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.IntegerField()),
                ('usd_amount', models.DecimalField(decimal_places=2, max_digits=12)),
                ('vendor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='spends', to='core.vendor')),
            ],
            options={
                'unique_together': {('vendor', 'year')},
            },
        ),
    ]

"""

================================================================================
File: core\migrations\0002_part_created_at_part_updated_at_risk_created_at_and_more.py
================================================================================
"""
# Generated by Django 5.0.7 on 2024-07-26 18:23

import django.core.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0001_initial'),
    ]

    operations = [
        migrations.AddField(
            model_name='part',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True, default=django.utils.timezone.now),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='part',
            name='updated_at',
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.AddField(
            model_name='risk',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True, default=django.utils.timezone.now),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='risk',
            name='updated_at',
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.AddField(
            model_name='spend',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True, default=django.utils.timezone.now),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='spend',
            name='updated_at',
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.AddField(
            model_name='vendor',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True, default=django.utils.timezone.now),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='vendor',
            name='updated_at',
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.AlterField(
            model_name='part',
            name='discount',
            field=models.DecimalField(decimal_places=2, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)]),
        ),
        migrations.AlterField(
            model_name='risk',
            name='risk_level',
            field=models.CharField(choices=[('LOW', 'Low'), ('MEDIUM', 'Medium'), ('HIGH', 'High')], max_length=50),
        ),
        migrations.AlterField(
            model_name='spend',
            name='usd_amount',
            field=models.DecimalField(decimal_places=2, max_digits=12, validators=[django.core.validators.MinValueValidator(0)]),
        ),
        migrations.AlterField(
            model_name='spend',
            name='year',
            field=models.IntegerField(validators=[django.core.validators.MinValueValidator(1900), django.core.validators.MaxValueValidator(2100)]),
        ),
        migrations.AlterField(
            model_name='vendor',
            name='contract_year',
            field=models.IntegerField(validators=[django.core.validators.MinValueValidator(1900), django.core.validators.MaxValueValidator(2100)]),
        ),
        migrations.AlterField(
            model_name='vendor',
            name='credit_limit',
            field=models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)]),
        ),
        migrations.AlterField(
            model_name='vendor',
            name='relationship_type',
            field=models.CharField(choices=[('STRATEGIC', 'Strategic'), ('PREFERRED', 'Preferred'), ('APPROVED', 'Approved'), ('TERMINATED', 'Terminated')], max_length=50),
        ),
    ]

"""

================================================================================
File: core\migrations\0003_alter_vendor_relationship_type_activity.py
================================================================================
"""
# Generated by Django 5.0.7 on 2024-07-29 20:24

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0002_part_created_at_part_updated_at_risk_created_at_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AlterField(
            model_name='vendor',
            name='relationship_type',
            field=models.CharField(choices=[('DIRECT', 'Direct'), ('THIRD PARTY', 'Third Party')], max_length=50),
        ),
        migrations.CreateModel(
            name='Activity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(max_length=255)),
                ('details', models.TextField()),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-date'],
            },
        ),
    ]

"""

================================================================================
File: core\migrations\0004_rename_updated_at_risk_last_updated_and_more.py
================================================================================
"""
# Generated by Django 5.0.7 on 2024-07-31 10:46

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0003_alter_vendor_relationship_type_activity'),
    ]

    operations = [
        migrations.RenameField(
            model_name='risk',
            old_name='updated_at',
            new_name='last_updated',
        ),
        migrations.RemoveField(
            model_name='risk',
            name='created_at',
        ),
        migrations.AddField(
            model_name='risk',
            name='average_discount_score',
            field=models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(15)]),
        ),
        migrations.AddField(
            model_name='risk',
            name='contract_score',
            field=models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(15)]),
        ),
        migrations.AddField(
            model_name='risk',
            name='payment_terms_score',
            field=models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(35)]),
        ),
        migrations.AddField(
            model_name='risk',
            name='relationship_type_score',
            field=models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)]),
        ),
        migrations.AddField(
            model_name='risk',
            name='spend_score',
            field=models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(25)]),
        ),
        migrations.AddField(
            model_name='risk',
            name='total_score',
            field=models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)]),
        ),
        migrations.AlterField(
            model_name='risk',
            name='risk_level',
            field=models.CharField(choices=[('LOW', 'Low'), ('MEDIUM', 'Medium'), ('HIGH', 'High')], default='MEDIUM', max_length=50),
        ),
    ]

"""

================================================================================
File: core\migrations\0005_risk_last_assessment_date_risk_risk_score_and_more.py
================================================================================
"""
# Generated by Django 5.0.7 on 2024-07-31 13:16

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0004_rename_updated_at_risk_last_updated_and_more'),
    ]

    operations = [
        migrations.AddField(
            model_name='risk',
            name='last_assessment_date',
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.AddField(
            model_name='risk',
            name='risk_score',
            field=models.IntegerField(default=0),
        ),
        migrations.AddField(
            model_name='spend',
            name='relationship_type',
            field=models.CharField(choices=[('DIRECT', 'Direct'), ('THIRD PARTY', 'Third Party')], default='DIRECT', max_length=50),
        ),
        migrations.AddField(
            model_name='vendor',
            name='average_discount',
            field=models.DecimalField(decimal_places=2, default=0, max_digits=5),
        ),
        migrations.AddField(
            model_name='vendor',
            name='contract_type',
            field=models.CharField(choices=[('FIXED', 'Fixed Price'), ('TIME', 'Time and Materials'), ('COST', 'Cost Plus')], default='FIXED', max_length=10),
        ),
        migrations.AddField(
            model_name='vendor',
            name='rating',
            field=models.DecimalField(decimal_places=2, default=0, max_digits=3),
        ),
    ]

"""

================================================================================
File: core\migrations\0006_vendor_country.py
================================================================================
"""
# Generated by Django 5.0.7 on 2024-07-31 13:18

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0005_risk_last_assessment_date_risk_risk_score_and_more'),
    ]

    operations = [
        migrations.AddField(
            model_name='vendor',
            name='country',
            field=models.CharField(blank=True, max_length=2, null=True),
        ),
    ]

"""

================================================================================
File: core\migrations\0007_remove_risk_last_assessment_date_and_more.py
================================================================================
"""
# Generated by Django 5.0.7 on 2024-07-31 14:21

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0006_vendor_country'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='risk',
            name='last_assessment_date',
        ),
        migrations.RemoveField(
            model_name='risk',
            name='risk_score',
        ),
        migrations.RemoveField(
            model_name='vendor',
            name='average_discount',
        ),
        migrations.RemoveField(
            model_name='vendor',
            name='contract_type',
        ),
        migrations.RemoveField(
            model_name='vendor',
            name='rating',
        ),
    ]

"""

================================================================================
File: core\migrations\0008_vendor_average_discount_vendor_contract_type_and_more.py
================================================================================
"""
# Generated by Django 5.0.7 on 2024-07-31 14:28

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0007_remove_risk_last_assessment_date_and_more'),
    ]

    operations = [
        migrations.AddField(
            model_name='vendor',
            name='average_discount',
            field=models.DecimalField(decimal_places=2, default=0, max_digits=5),
        ),
        migrations.AddField(
            model_name='vendor',
            name='contract_type',
            field=models.CharField(choices=[('FIXED', 'Fixed Price'), ('TIME', 'Time and Materials'), ('COST', 'Cost Plus')], default='FIXED', max_length=10),
        ),
        migrations.AddField(
            model_name='vendor',
            name='rating',
            field=models.DecimalField(decimal_places=2, default=0, max_digits=3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)]),
        ),
    ]

"""

================================================================================
File: core\migrations\__init__.py
================================================================================
"""

"""

================================================================================
File: core\templates\core\dashboard.html
================================================================================
"""
{% extends 'base.html' %}
{% load static %}

{% block content %}
<h1 class="text-3xl font-bold mb-6">Vendor Management Dashboard</h1>

<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-8">
    <div class="bg-white p-4 rounded shadow">
        <h2 class="text-lg font-semibold mb-2">Total Vendors</h2>
        <p class="text-3xl">{{ total_vendors }}</p>
    </div>
    <div class="bg-white p-4 rounded shadow">
        <h2 class="text-lg font-semibold mb-2">Total Spend</h2>
        <p class="text-3xl" id="total-spend">{{ total_spend }}</p>
    </div>
    <div class="bg-white p-4 rounded shadow">
        <h2 class="text-lg font-semibold mb-2">Avg Risk Score</h2>
        <p class="text-3xl">{{ avg_risk_score|floatformat:2 }}</p>
    </div>
    <div class="bg-white p-4 rounded shadow">
        <h2 class="text-lg font-semibold mb-2">High Risk Vendors</h2>
        <p class="text-3xl" id="high-risk-vendors">Loading...</p>
    </div>
</div>

<div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-8">
    <div class="bg-white p-4 rounded shadow">
        <h2 class="text-lg font-semibold mb-2">Risk Distribution</h2>
        <canvas id="risk-chart"></canvas>
    </div>
    <div class="bg-white p-4 rounded shadow">
        <h2 class="text-lg font-semibold mb-2">Spend by Year</h2>
        <canvas id="spend-chart"></canvas>
    </div>
    <div class="bg-white p-4 rounded shadow">
        <h2 class="text-lg font-semibold mb-2">Spend by Relationship Type</h2>
        <canvas id="relationship-chart"></canvas>
    </div>
    <div class="bg-white p-4 rounded shadow">
        <h2 class="text-lg font-semibold mb-2">Contract Type Distribution</h2>
        <canvas id="contract-chart"></canvas>
    </div>
    <div class="bg-white p-4 rounded shadow">
        <h2 class="text-lg font-semibold mb-2">Geographical Distribution</h2>
        <canvas id="geo-chart"></canvas>
    </div>
    <div class="bg-white p-4 rounded shadow">
        <h2 class="text-lg font-semibold mb-2">Vendor Performance</h2>
        <p>Average Rating: <span id="avg-rating">Loading...</span></p>
        <p>Average Discount: <span id="avg-discount">Loading...</span></p>
    </div>
</div>

<div class="bg-white p-4 rounded shadow mb-8">
    <h2 class="text-lg font-semibold mb-2">Recent Activity</h2>
    <ul>
        {% for activity in recent_activities %}
        <li>{{ activity.date|date:"Y-m-d H:i" }} - {{ activity.action }} - {{ activity.details }}</li>
        {% endfor %}
    </ul>
</div>

<button id="export-btn" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
    Export Dashboard Data
</button>
{% endblock %}

{% block extra_js %}
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        fetch('/api/dashboard-data/')
            .then(response => response.json())
            .then(data => {
                updateDashboard(data);
            });

        function updateDashboard(data) {
            console.log('Received dashboard data:', data);

            function updateElement(id, value) {
                const element = document.getElementById(id);
                if (element) {
                    element.textContent = value;
                } else {
                    console.error(`Element with id '${id}' not found`);
                }
            }

            function createChart(canvasId, type, data, labelKey, valueKey) {
                const canvas = document.getElementById(canvasId);
                if (!canvas) {
                    console.error(`Canvas with id '${canvasId}' not found`);
                    return;
                }

                new Chart(canvas, {
                    type: type,
                    data: {
                        labels: data.map(item => item[labelKey]),
                        datasets: [{
                            data: data.map(item => item[valueKey]),
                            backgroundColor: [
                                'rgba(255, 99, 132, 0.8)',
                                'rgba(54, 162, 235, 0.8)',
                                'rgba(255, 206, 86, 0.8)',
                                'rgba(75, 192, 192, 0.8)',
                                'rgba(153, 102, 255, 0.8)',
                            ],
                        }]
                    },
                    options: {
                        responsive: true,
                        plugins: {
                            legend: {
                                position: 'top',
                            },
                            title: {
                                display: true,
                                text: canvasId.replace('-', ' ').toUpperCase()
                            }
                        }
                    }
                });
            }

            // Update high risk vendors count
            updateElement('high-risk-vendors', data.high_risk_vendors);

            // Calculate and update total spend
            const totalSpend = data.spend_by_year.reduce((sum, year) => sum + parseFloat(year.total_spend), 0);
            updateElement('total-spend', data.total_spend);

            // Update vendor performance
            if (data.vendor_performance) {
                updateElement('avg-rating', parseFloat(data.vendor_performance.avg_rating).toFixed(2));
                updateElement('avg-discount', parseFloat(data.vendor_performance.avg_discount).toFixed(2) + '%');
            } else {
                console.error('Vendor performance data is missing');
            }

            // Create charts
            createChart('risk-chart', 'pie', data.risk_distribution, 'risk_level', 'count');
            createChart('spend-chart', 'line', data.spend_by_year, 'year', 'total_spend');
            createChart('relationship-chart', 'bar', data.spend_by_relationship, 'relationship_type', 'total_spend');
            createChart('contract-chart', 'pie', data.contract_distribution, 'contract_type', 'count');

            // For geographical distribution, we'll limit to top 10 countries for better visualization
            const topCountries = data.geographical_distribution
                .sort((a, b) => b.count - a.count)
                .slice(0, 10);
            createChart('geo-chart', 'bar', topCountries, 'country', 'count');

            // Update any additional elements or charts here

            console.log('Dashboard update completed');
        }

        // Export functionality
        document.getElementById('export-btn').addEventListener('click', function () {
            fetch('/api/dashboard-data/')
                .then(response => response.json())
                .then(data => {
                    let csv = 'data:text/csv;charset=utf-8,';
                    // Add headers
                    csv += 'Category,Subcategory,Value\n';

                    // Add data
                    for (let key in data) {
                        if (Array.isArray(data[key])) {
                            data[key].forEach(item => {
                                csv += `${key},${Object.values(item).join(',')}\n`;
                            });
                        } else if (typeof data[key] === 'object') {
                            for (let subKey in data[key]) {
                                csv += `${key},${subKey},${data[key][subKey]}\n`;
                            }
                        } else {
                            csv += `${key},,${data[key]}\n`;
                        }
                    }

                    // Create download link
                    var encodedUri = encodeURI(csv);
                    var link = document.createElement("a");
                    link.setAttribute("href", encodedUri);
                    link.setAttribute("download", "dashboard_data.csv");
                    document.body.appendChild(link);
                    link.click();
                });
        });
    });
</script>
{% endblock %}
"""

================================================================================
File: core\templates\core\home.html
================================================================================
"""
{% extends 'base.html' %}
{% load static %}

{% block title %}Home - Vendor Management{% endblock %}

{% block content %}
<div class="container">
    <h1 class="mb-4">Vendor Management Dashboard</h1>

    <div class="row">
        <div class="col-md-3 mb-4">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Total Vendors</h5>
                    <p class="card-text display-4">{{ vendor_count }}</p>
                </div>
            </div>
        </div>
        <div class="col-md-3 mb-4">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Total Parts</h5>
                    <p class="card-text display-4">{{ part_count }}</p>
                </div>
            </div>
        </div>
        <div class="col-md-3 mb-4">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Total Spend</h5>
                    <p class="card-text display-4">${{ spend_total|floatformat:2 }}</p>
                </div>
            </div>
        </div>
        <div class="col-md-3 mb-4">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">High Risk Vendors</h5>
                    <p class="card-text display-4">{{ high_risk_count }}</p>
                </div>
            </div>
        </div>
    </div>

    <div class="row mt-4">
        <div class="col-md-6 mb-4">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Average Spend per Vendor</h5>
                    <p class="card-text display-4">${{ avg_spend_per_vendor|floatformat:2 }}</p>
                </div>
            </div>
        </div>
        <div class="col-md-6 mb-4">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Top 5 Vendors by Spend</h5>
                    <ul class="list-group">
                        {% for vendor in top_vendors %}
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            {{ vendor.vendor_name }}
                            <span class="badge bg-primary rounded-pill">${{ vendor.total_spend|floatformat:2 }}</span>
                        </li>
                        {% endfor %}
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}
"""

================================================================================
File: core\templates\core\pagination.html
================================================================================
"""
{% if is_paginated %}
<nav class="bg-white px-4 py-3 flex items-center justify-between border-t border-gray-200 sm:px-6"
    aria-label="Pagination">
    <div class="hidden sm:block">
        <p class="text-sm text-gray-700">
            Showing page {{ page_obj.number }} of {{ page_obj.paginator.num_pages }}
        </p>
    </div>
    <div class="flex-1 flex justify-between sm:justify-end">
        {% if page_obj.has_previous %}
        <a href="?page=1{% if search_query %}&search={{ search_query }}{% endif %}{% if relationship_type %}&relationship_type={{ relationship_type }}{% endif %}{% if risk_level %}&risk_level={{ risk_level }}{% endif %}{% if sort_by %}&sort_by={{ sort_by }}{% endif %}{% if sort_order %}&sort_order={{ sort_order }}{% endif %}"
            class="relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
            First
        </a>
        <a href="?page={{ page_obj.previous_page_number }}{% if search_query %}&search={{ search_query }}{% endif %}{% if relationship_type %}&relationship_type={{ relationship_type }}{% endif %}{% if risk_level %}&risk_level={{ risk_level }}{% endif %}{% if sort_by %}&sort_by={{ sort_by }}{% endif %}{% if sort_order %}&sort_order={{ sort_order }}{% endif %}"
            class="ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
            Previous
        </a>
        {% endif %}
        {% if page_obj.has_next %}
        <a href="?page={{ page_obj.next_page_number }}{% if search_query %}&search={{ search_query }}{% endif %}{% if relationship_type %}&relationship_type={{ relationship_type }}{% endif %}{% if risk_level %}&risk_level={{ risk_level }}{% endif %}{% if sort_by %}&sort_by={{ sort_by }}{% endif %}{% if sort_order %}&sort_order={{ sort_order }}{% endif %}"
            class="ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
            Next
        </a>
        <a href="?page={{ page_obj.paginator.num_pages }}{% if search_query %}&search={{ search_query }}{% endif %}{% if relationship_type %}&relationship_type={{ relationship_type }}{% endif %}{% if risk_level %}&risk_level={{ risk_level }}{% endif %}{% if sort_by %}&sort_by={{ sort_by }}{% endif %}{% if sort_order %}&sort_order={{ sort_order }}{% endif %}"
            class="ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
            Last
        </a>
        {% endif %}
    </div>
</nav>
{% endif %}
"""

================================================================================
File: core\templates\core\part_form.html
================================================================================
"""
{% extends 'base.html' %}

{% block content %}
<h1>{% if form.instance.pk %}Edit{% else %}Add{% endif %} Part</h1>
<form method="post">
    {% csrf_token %}
    {% buttons %}
        <button type="submit" class="btn btn-primary">Save</button>
        <a href="{% url 'vendor-list' %}" class="btn btn-secondary">Cancel</a>
    {% endbuttons %}
</form>
{% endblock %}
"""

================================================================================
File: core\templates\core\risk_form.html
================================================================================
"""
{% extends 'base.html' %}

{% block content %}
<h1>{% if form.instance.pk %}Edit{% else %}Add{% endif %} Risk Assessment</h1>
<form method="post">
    {% csrf_token %}
    {% buttons %}
        <button type="submit" class="btn btn-primary">Save</button>
        <a href="{% url 'vendor-list' %}" class="btn btn-secondary">Cancel</a>
    {% endbuttons %}
</form>
{% endblock %}
"""

================================================================================
File: core\templates\core\search_results.html
================================================================================
"""
{% extends 'base.html' %}

{% block title %}Search Results - Vendor Management{% endblock %}

{% block content %}
<h1 class="text-3xl font-bold mb-6 text-navy">Search Results</h1>

<div class="bg-white shadow-md rounded-lg p-6">
    <h2 class="text-xl font-semibold mb-4 text-navy">Results for "{{ query }}"</h2>

    {% if results %}
    <ul class="divide-y divide-gray-200">
        {% for result in results %}
        <li class="py-4">
            <h3 class="text-lg font-medium text-gray-900">
                {{ result.title }} 
                <span class="text-sm text-gray-500">({{ result.type }})</span>
            </h3>
            <p class="mt-1 text-sm text-gray-600">{{ result.description }}</p>
            <a href="{{ result.url }}" class="mt-2 text-sm text-blue-600 hover:underline">View details</a>
        </li>
        {% endfor %}
    </ul>
    {% else %}
    <p class="text-gray-600">No results found for "{{ query }}".</p>
    {% endif %}
</div>
{% endblock %}
"""

================================================================================
File: core\templates\core\skeleton-loader.html
================================================================================
"""
{% load static %}

<div class="animate-pulse">
    <div class="h-4 bg-gray-200 rounded w-3/4 mb-2"></div>
    <div class="h-4 bg-gray-200 rounded w-1/2 mb-2"></div>
    <div class="h-4 bg-gray-200 rounded w-5/6"></div>
</div>
"""

================================================================================
File: core\templates\core\spend_form.html
================================================================================
"""
{% extends 'base.html' %}

{% block content %}
<h1>{% if form.instance.pk %}Edit{% else %}Add{% endif %} Spend</h1>
<form method="post">
    {% csrf_token %}
    {% buttons %}
    <button type="submit" class="btn btn-primary">Save</button>
    <a href="{% url 'vendor-list' %}" class="btn btn-secondary">Cancel</a>
    {% endbuttons %}
</form>
{% endblock %}
"""

================================================================================
File: core\templates\core\vendor_form.html
================================================================================
"""
{% extends 'base.html' %}

{% block content %}
<h1 class="text-3xl font-bold mb-6 text-navy">{% if form.instance.pk %}Edit{% else %}Add{% endif %} Vendor</h1>
<form method="post" id="vendorForm" class="bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4">
    {% csrf_token %}
    {% for field in form %}
    <div class="mb-4">
        <label class="block text-gray-700 text-sm font-bold mb-2" for="{{ field.id_for_label }}">
            {{ field.label }}
        </label>
        {{ field }}
        <p class="text-red-500 text-xs italic hidden" id="{{ field.id_for_label }}_error"></p>
    </div>
    {% endfor %}
    <div class="flex items-center justify-between">
        <button class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline" type="submit">
            Save
        </button>
        <a class="inline-block align-baseline font-bold text-sm text-blue-500 hover:text-blue-800" href="{% url 'vendor_list' %}">
            Cancel
        </a>
    </div>
</form>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('vendorForm');
    const fields = form.querySelectorAll('input, select');

    fields.forEach(field => {
        field.addEventListener('blur', function() {
            validateField(this);
        });
    });

    form.addEventListener('submit', function(e) {
        let isValid = true;
        fields.forEach(field => {
            if (!validateField(field)) {
                isValid = false;
            }
        });

        if (!isValid) {
            e.preventDefault();
        }
    });

    function validateField(field) {
        const errorElement = document.getElementById(`${field.id}_error`);
        let isValid = true;

        if (field.required && !field.value) {
            errorElement.textContent = 'This field is required.';
            errorElement.classList.remove('hidden');
            isValid = false;
        } else if (field.type === 'email' && !isValidEmail(field.value)) {
            errorElement.textContent = 'Please enter a valid email address.';
            errorElement.classList.remove('hidden');
            isValid = false;
        } else {
            errorElement.textContent = '';
            errorElement.classList.add('hidden');
        }

        return isValid;
    }

    function isValidEmail(email) {
        const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        return re.test(email);
    }
});
</script>
{% endblock %}
"""

================================================================================
File: core\templates\core\vendor_list.html
================================================================================
"""
{% extends 'base.html' %}
{% load static %}

{% block title %}Vendor List - Vendor Management{% endblock %}

{% block content %}
<h1 class="text-3xl font-bold mb-6 text-navy">Vendor List</h1>

<div class="bg-white shadow-md rounded-lg p-6 mb-6">
    <form method="get" id="filterForm" class="mb-4">
        <div class="flex flex-wrap -mx-3 mb-2">
            <div class="w-full md:w-1/3 px-3 mb-6 md:mb-0">
                <input type="text" name="search" value="{{ search_query }}" placeholder="Search vendors..." class="appearance-none block w-full bg-gray-200 text-gray-700 border rounded py-3 px-4 mb-3 leading-tight focus:outline-none focus:bg-white">
            </div>
            <div class="w-full md:w-1/3 px-3 mb-6 md:mb-0">
                <select name="relationship_type" class="block appearance-none w-full bg-gray-200 border border-gray-200 text-gray-700 py-3 px-4 pr-8 rounded leading-tight focus:outline-none focus:bg-white focus:border-gray-500">
                    <option value="">All Relationship Types</option>
                    {% for value, display in vendor_relationship_types %}
                        <option value="{{ value }}" {% if value == relationship_type %}selected{% endif %}>{{ display }}</option>
                    {% endfor %}
                </select>
            </div>
            <div class="w-full md:w-1/3 px-3 mb-6 md:mb-0">
                <select name="risk_level" class="block appearance-none w-full bg-gray-200 border border-gray-200 text-gray-700 py-3 px-4 pr-8 rounded leading-tight focus:outline-none focus:bg-white focus:border-gray-500">
                    <option value="">All Risk Levels</option>
                    {% for value, display in risk_levels %}
                        <option value="{{ value }}" {% if value == risk_level %}selected{% endif %}>{{ display }}</option>
                    {% endfor %}
                </select>
            </div>
        </div>
        <input type="hidden" name="sort_by" value="{{ sort_by }}">
        <input type="hidden" name="sort_order" value="{{ sort_order }}">
        <div class="flex justify-end">
            <button type="submit" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline">
                Filter
            </button>
        </div>
    </form>

    <table class="min-w-full divide-y divide-gray-200" id="vendorTable">
        <thead class="bg-gray-50">
            <tr>
                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer" data-sort="vendor_name">
                    Vendor Name
                    <span class="sort-indicator"></span>
                </th>
                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer" data-sort="vendor_id">
                    Vendor ID
                    <span class="sort-indicator"></span>
                </th>
                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer" data-sort="payment_terms">
                    Payment Terms
                    <span class="sort-indicator"></span>
                </th>
                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer" data-sort="contract_year">
                    Contract Year
                    <span class="sort-indicator"></span>
                </th>
                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer" data-sort="relationship_type">
                    Relationship Type
                    <span class="sort-indicator"></span>
                </th>
                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer" data-sort="risk__risk_level">
                    Risk Level
                    <span class="sort-indicator"></span>
                </th>
            </tr>
        </thead>
        <tbody class="bg-white divide-y divide-gray-200">
            {% for vendor in vendors %}
            <tr>
                <td class="px-6 py-4 whitespace-nowrap">
                    <a href="{% url 'vendor_profile' vendor.pk %}" class="text-blue-600 hover:underline">{{ vendor.vendor_name }}</a>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                    {{ vendor.vendor_id }}
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                    {{ vendor.payment_terms }}
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                    {{ vendor.contract_year }}
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                    <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full {% if vendor.relationship_type == 'DIRECT' %}bg-green-100 text-green-800{% else %}bg-gray-100 text-gray-800{% endif %}">
                        {{ vendor.get_relationship_type_display }}
                    </span>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                    <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full 
                        {% if vendor.risk.risk_level == 'LOW' %}bg-green-100 text-green-800
                        {% elif vendor.risk.risk_level == 'MEDIUM' %}bg-yellow-100 text-yellow-800
                        {% else %}bg-red-100 text-red-800{% endif %}">
                        {{ vendor.risk.get_risk_level_display }}
                    </span>
                </td>
            </tr>
            {% empty %}
            <tr>
                <td colspan="6" class="px-6 py-4 whitespace-nowrap text-center">
                    No vendors found.
                </td>
            </tr>
            {% endfor %}
        </tbody>
    </table>

    {% include 'core/pagination.html' %}
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const table = document.getElementById('vendorTable');
    const headers = table.querySelectorAll('th[data-sort]');
    const filterForm = document.getElementById('filterForm');
    const sortByInput = filterForm.querySelector('input[name="sort_by"]');
    const sortOrderInput = filterForm.querySelector('input[name="sort_order"]');

    headers.forEach(header => {
        header.addEventListener('click', () => {
            const sortBy = header.getAttribute('data-sort');
            let sortOrder = 'asc';

            if (sortBy === sortByInput.value) {
                sortOrder = sortOrderInput.value === 'asc' ? 'desc' : 'asc';
            }

            sortByInput.value = sortBy;
            sortOrderInput.value = sortOrder;
            filterForm.submit();
        });

        // Add sort indicators
        if (header.getAttribute('data-sort') === sortByInput.value) {
            const indicator = header.querySelector('.sort-indicator');
            indicator.textContent = sortOrderInput.value === 'asc' ? '▲' : '▼';
        }
    });
});
</script>
{% endblock %}
"""

================================================================================
File: core\templates\core\vendor_profile.html
================================================================================
"""
{% extends 'base.html' %}
{% load static %}

{% block title %}{{ vendor.vendor_name }} - Vendor Profile{% endblock %}

{% block content %}
<div class="container mx-auto px-4 py-8">
    <h1 class="text-3xl font-bold mb-6 text-navy">{{ vendor.vendor_name }}</h1>

    <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <!-- Vendor Details Card -->
        <div class="bg-white shadow-md rounded-lg p-6">
            <h2 class="text-xl font-semibold mb-4 text-navy">Vendor Details</h2>
            <table class="w-full">
                <tr>
                    <th class="text-left py-2 text-gray-600">Vendor ID:</th>
                    <td class="py-2">{{ vendor.vendor_id }}</td>
                </tr>
                <tr>
                    <th class="text-left py-2 text-gray-600">Payment Terms:</th>
                    <td class="py-2">{{ vendor.payment_terms }}</td>
                </tr>
                <tr>
                    <th class="text-left py-2 text-gray-600">Credit Limit:</th>
                    <td class="py-2">${{ vendor.credit_limit|floatformat:2 }}</td>
                </tr>
                <tr>
                    <th class="text-left py-2 text-gray-600">Contract Year:</th>
                    <td class="py-2">{{ vendor.contract_year }}</td>
                </tr>
                <tr>
                    <th class="text-left py-2 text-gray-600">Relationship Type:</th>
                    <td class="py-2">{{ vendor.get_relationship_type_display }}</td>
                </tr>
            </table>
        </div>

        <!-- Risk Assessment Card -->
        <div class="bg-white shadow-md rounded-lg p-6">
            <h2 class="text-xl font-semibold mb-4 text-navy">Risk Assessment</h2>
            <p class="mb-2">Risk Level:
                <span class="font-bold {% if risk.risk_level == 'HIGH' %}text-red-600
                                      {% elif risk.risk_level == 'MEDIUM' %}text-yellow-600
                                      {% else %}text-green-600{% endif %}">
                    {{ risk.get_risk_level_display }}
                </span>
            </p>
            <p class="mb-2">Total Score: {{ risk.total_score }}</p>
            <h3 class="text-lg font-semibold mt-4 mb-2">Score Breakdown:</h3>
            <ul class="list-disc list-inside">
                <li>Payment Terms: {{ risk.payment_terms_score }} / 35</li>
                <li>Spend: {{ risk.spend_score }} / 25</li>
                <li>Average Discount: {{ risk.average_discount_score }} / 15</li>
                <li>Contract: {{ risk.contract_score }} / 15</li>
                <li>Relationship Type: {{ risk.relationship_type_score }} / 10</li>
            </ul>
            <p class="text-sm text-gray-500 mt-4">Last updated: {{ risk.last_updated|date:"F d, Y H:i" }}</p>
        </div>

        <!-- Parts Card -->
        <div class="bg-white shadow-md rounded-lg p-6">
            <h2 class="text-xl font-semibold mb-4 text-navy">Parts</h2>
            <p class="mb-4">Average Discount: {{ avg_discount|floatformat:2 }}%</p>
            <div class="overflow-x-auto max-h-64">
                <table class="min-w-full">
                    <thead class="bg-gray-50">
                        <tr>
                            <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Part Number</th>
                            <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Buyer</th>
                            <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Discount</th>
                        </tr>
                    </thead>
                    <tbody class="bg-white divide-y divide-gray-200">
                        {% for part in parts %}
                        <tr>
                            <td class="px-4 py-2 whitespace-nowrap">{{ part.part_number }}</td>
                            <td class="px-4 py-2 whitespace-nowrap">{{ part.buyer }}</td>
                            <td class="px-4 py-2 whitespace-nowrap">{{ part.discount }}%</td>
                        </tr>
                        {% empty %}
                        <tr>
                            <td colspan="3" class="px-4 py-2 text-center">No parts found for this vendor.</td>
                        </tr>
                        {% endfor %}
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Spend History Card -->
        <div class="bg-white shadow-md rounded-lg p-6">
            <h2 class="text-xl font-semibold mb-4 text-navy">Spend History</h2>
            <div class="overflow-x-auto">
                <table class="min-w-full">
                    <thead class="bg-gray-50">
                        <tr>
                            <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Year</th>
                            <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Amount</th>
                        </tr>
                    </thead>
                    <tbody class="bg-white divide-y divide-gray-200">
                        {% for spend in spends %}
                        <tr>
                            <td class="px-4 py-2 whitespace-nowrap">{{ spend.year }}</td>
                            <td class="px-4 py-2 whitespace-nowrap">${{ spend.usd_amount|floatformat:2 }}</td>
                        </tr>
                        {% empty %}
                        <tr>
                            <td colspan="2" class="px-4 py-2 text-center">No spend history found for this vendor.</td>
                        </tr>
                        {% endfor %}
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Spend History Chart -->
        <div class="bg-white shadow-md rounded-lg p-6">
            <h2 class="text-xl font-semibold mb-4 text-navy">Spend History Chart</h2>
            <canvas id="spendChart"></canvas>
        </div>

        <!-- Parts Distribution -->
        <div class="bg-white shadow-md rounded-lg p-6">
            <h2 class="text-xl font-semibold mb-4 text-navy">Parts Distribution</h2>
            <canvas id="partsChart"></canvas>
        </div>
    </div>
</div>
{% endblock %}

{% block extra_js %}
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        // Prepare data for charts
        var spendData = {
            labels: [{% for spend in spends %}"{{ spend.year }}"{% if not forloop.last %}, {% endif %} {% endfor %}],
        data: [{% for spend in spends %}{{ spend.usd_amount }}{% if not forloop.last %}, {% endif %} {% endfor %}]
        };

    var partsData = {
        labels: [{% for part in parts %}"{{ part.part_number }}"{% if not forloop.last %}, {% endif %} {% endfor %}],
    data: [{% for part in parts %}1{% if not forloop.last %}, {% endif %} {% endfor %}]
        };

    // Spend History Chart
    var spendCtx = document.getElementById('spendChart').getContext('2d');
    new Chart(spendCtx, {
        type: 'line',
        data: {
            labels: spendData.labels,
            datasets: [{
                label: 'Spend Amount',
                data: spendData.data,
                borderColor: 'rgb(75, 192, 192)',
                tension: 0.1
            }]
        },
        options: {
            responsive: true,
            scales: {
                y: {
                    beginAtZero: true,
                    title: {
                        display: true,
                        text: 'USD Amount'
                    }
                }
            }
        }
    });

    // Parts Distribution Chart
    var partsCtx = document.getElementById('partsChart').getContext('2d');
    new Chart(partsCtx, {
        type: 'pie',
        data: {
            labels: partsData.labels,
            datasets: [{
                data: partsData.data,
                backgroundColor: [
                    'rgba(255, 99, 132, 0.8)',
                    'rgba(54, 162, 235, 0.8)',
                    'rgba(255, 206, 86, 0.8)',
                    'rgba(75, 192, 192, 0.8)',
                    'rgba(153, 102, 255, 0.8)',
                ]
            }]
        },
        options: {
            responsive: true,
            plugins: {
                legend: {
                    position: 'right'
                }
            }
        }
    });
    });
</script>
{% endblock %}
"""

================================================================================
File: data_import\admin.py
================================================================================
"""
# data_import/admin.py

from django.contrib import admin
from .models import DiscountImport, SpendImport, VendorImport

admin.site.register(DiscountImport)
admin.site.register(SpendImport)
admin.site.register(VendorImport)

"""

================================================================================
File: data_import\apps.py
================================================================================
"""
from django.apps import AppConfig


class DataImportConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'data_import'

"""

================================================================================
File: data_import\forms.py
================================================================================
"""
from django import forms


class FileUploadForm(forms.Form):
    IMPORT_TYPES = [
        ("vendors", "Vendors Report"),
        ("parts", "Parts Report"),
        ("spend", "Spend Report"),
    ]

    file = forms.FileField(label="Select a CSV or Excel file")
    import_type = forms.ChoiceField(choices=IMPORT_TYPES, label="Select Import Type")

    def clean_file(self):
        file = self.cleaned_data["file"]
        ext = file.name.split(".")[-1].lower()
        if ext not in ["csv", "xlsx", "xls"]:
            raise forms.ValidationError("Only CSV and Excel files are allowed.")
        return file

"""

================================================================================
File: data_import\import_handlers.py
================================================================================
"""
# data_import/import_handlers.py

import pandas as pd
from django.db import transaction
from core.models import Vendor, Part, Spend, Risk
from .models import DiscountImport, SpendImport, VendorImport
from django.db import IntegrityError
from core.risk_assessment import update_vendor_risk


@transaction.atomic
def handle_uploaded_file(file, import_type):
    try:
        if file.name.endswith(".xlsx"):
            df = pd.read_excel(file, engine="openpyxl")
        else:
            raise ValueError(
                "Unsupported file format. Please upload an Excel file (.xlsx)."
            )

        print(f"Columns in the uploaded file: {df.columns.tolist()}")
        print(f"First few rows of the data:\n{df.head()}")

        if import_type == "vendors":
            import_vendors(df)
        elif import_type == "parts":
            import_discount(df)
        elif import_type == "spend":
            import_spend(df)
        else:
            raise ValueError("Invalid import type")

        return len(df)
    except Exception as e:
        print(f"Error during file import: {str(e)}")
        raise


def import_discount(df):
    for _, row in df.iterrows():
        DiscountImport.objects.create(
            part_number=row["part_number"], discount=row["discount"]
        )

    for discount_import in DiscountImport.objects.all():
        part = Part.objects.filter(part_number=discount_import.part_number).first()
        if part:
            part.discount = discount_import.discount
            part.save()
            part.vendor.update_performance_metrics()
        else:
            print(f"Warning: No part found with number {discount_import.part_number}")

    DiscountImport.objects.all().delete()


def import_spend(df):
    required_columns = ["vendor_id", "usd_amount", "year"]
    missing_columns = [col for col in required_columns if col not in df.columns]
    if missing_columns:
        raise ValueError(
            f"The following required columns are missing: {', '.join(missing_columns)}"
        )

    for _, row in df.iterrows():
        SpendImport.objects.create(
            vendor_id=row["vendor_id"], usd_amount=row["usd_amount"], year=row["year"]
        )

    for spend_import in SpendImport.objects.all():
        vendor = Vendor.objects.filter(vendor_id=spend_import.vendor_id).first()
        if vendor:
            try:
                spend, created = Spend.objects.update_or_create(
                    vendor=vendor,
                    year=spend_import.year,
                    defaults={
                        "usd_amount": spend_import.usd_amount,
                    },
                )
                if created:
                    print(
                        f"Created new Spend entry for vendor {vendor.vendor_name} in year {spend_import.year}"
                    )
                else:
                    print(
                        f"Updated existing Spend entry for vendor {vendor.vendor_name} in year {spend_import.year}"
                    )

                # Update risk assessment and performance metrics after spend import
                update_vendor_risk(vendor)
                vendor.update_performance_metrics()
            except IntegrityError as e:
                print(f"Error creating/updating Spend entry: {str(e)}")
        else:
            print(f"Warning: No vendor found with ID {spend_import.vendor_id}")

    SpendImport.objects.all().delete()


@transaction.atomic
def import_vendors(df):
    required_columns = [
        "part_number",
        "vendor_id",
        "vendor",
        "buyer",
        "payment_terms",
        "credit_limit",
        "contract_year",
        "relationship_type",
    ]
    # Remove "contract_type" from the required columns list
    missing_columns = [col for col in required_columns if col not in df.columns]
    if missing_columns:
        raise ValueError(
            f"The following required columns are missing: {', '.join(missing_columns)}"
        )

    for _, row in df.iterrows():
        vendor, created = Vendor.objects.update_or_create(
            vendor_id=row["vendor_id"],
            defaults={
                "vendor_name": row["vendor"],
                "payment_terms": str(row["payment_terms"]),  # Convert to string
                "credit_limit": row["credit_limit"],
                "contract_year": row["contract_year"],
                "relationship_type": row["relationship_type"],
                "contract_type": "Direct",  # Set a default value
                "country": row["part_number"].split("-")[
                    2
                ],  # Extract country from part number
            },
        )

        Part.objects.update_or_create(
            part_number=row["part_number"],
            defaults={
                "vendor": vendor,
                "buyer": row["buyer"],
                "discount": 0,  # Default value, will be updated by discount import
            },
        )

        # Update risk assessment and performance metrics
        update_vendor_risk(vendor)
        vendor.update_performance_metrics()

    VendorImport.objects.all().delete()

"""

================================================================================
File: data_import\models.py
================================================================================
"""
# data_import/models.py

from django.db import models


class DiscountImport(models.Model):
    part_number = models.CharField(max_length=50)
    discount = models.DecimalField(max_digits=5, decimal_places=2)


class SpendImport(models.Model):
    vendor_id = models.CharField(max_length=50)
    usd_amount = models.DecimalField(max_digits=12, decimal_places=2)
    year = models.IntegerField()


class VendorImport(models.Model):
    part_number = models.CharField(max_length=50)
    vendor_id = models.CharField(max_length=50)
    vendor = models.CharField(max_length=200)
    buyer = models.CharField(max_length=100)
    payment_terms = models.CharField(max_length=100)
    credit_limit = models.DecimalField(max_digits=10, decimal_places=2)
    contract_year = models.IntegerField()
    relationship_type = models.CharField(max_length=50)
    contract_type = models.CharField(max_length=10, default="FIXED")  # Add this line

    def __str__(self):
        return f"{self.vendor} ({self.vendor_id})"

"""

================================================================================
File: data_import\tests.py
================================================================================
"""
from django.test import TestCase

# Create your tests here.

"""

================================================================================
File: data_import\urls.py
================================================================================
"""
from django.urls import path
from .views import import_data

urlpatterns = [
    path("", import_data, name="import_data"),
]

"""

================================================================================
File: data_import\views.py
================================================================================
"""
# data_import/views.py

from django.shortcuts import render, redirect
from django.contrib import messages
from .forms import FileUploadForm
from .import_handlers import handle_uploaded_file
import traceback
from core.models import Activity
from django.contrib.auth.decorators import login_required


@login_required
def import_data(request):
    if request.method == "POST":
        form = FileUploadForm(request.POST, request.FILES)
        if form.is_valid():
            import_type = form.cleaned_data["import_type"]
            uploaded_file = request.FILES["file"]
            try:
                records_imported = handle_uploaded_file(uploaded_file, import_type)

                # Create an Activity record for the import
                Activity.objects.create(
                    user=request.user,
                    action=f"Import {import_type}",
                    details=f"Successfully imported/updated {records_imported} records for {import_type}.",
                )

                messages.success(
                    request,
                    f"Successfully imported/updated {records_imported} records for {import_type}.",
                )
                return redirect("dashboard")
            except ValueError as e:
                messages.error(request, str(e))
            except Exception as e:
                messages.error(
                    request, f"An unexpected error occurred during import: {str(e)}"
                )
                print(traceback.format_exc())
    else:
        form = FileUploadForm()
    return render(request, "data_import/import.html", {"form": form})

"""

================================================================================
File: data_import\__init__.py
================================================================================
"""

"""

================================================================================
File: data_import\migrations\0001_initial.py
================================================================================
"""
# Generated by Django 5.0.7 on 2024-07-29 12:36

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='DiscountImport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('part_number', models.CharField(max_length=50)),
                ('discount', models.DecimalField(decimal_places=2, max_digits=5)),
            ],
        ),
        migrations.CreateModel(
            name='SpendImport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vendor_id', models.CharField(max_length=50)),
                ('usd_amount', models.DecimalField(decimal_places=2, max_digits=12)),
                ('year', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='VendorImport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('part_number', models.CharField(max_length=50)),
                ('vendor_id', models.CharField(max_length=50)),
                ('vendor', models.CharField(max_length=200)),
                ('buyer', models.CharField(max_length=100)),
                ('payment_terms', models.CharField(max_length=100)),
                ('credit_limit', models.DecimalField(decimal_places=2, max_digits=10)),
                ('contract_year', models.IntegerField()),
                ('relationship_type', models.CharField(max_length=50)),
            ],
        ),
    ]

"""

================================================================================
File: data_import\migrations\0002_vendorimport_contract_type.py
================================================================================
"""
# Generated by Django 5.0.7 on 2024-07-31 13:16

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('data_import', '0001_initial'),
    ]

    operations = [
        migrations.AddField(
            model_name='vendorimport',
            name='contract_type',
            field=models.CharField(default='FIXED', max_length=10),
        ),
    ]

"""

================================================================================
File: data_import\migrations\__init__.py
================================================================================
"""

"""

================================================================================
File: data_import\templates\data_import\import.html
================================================================================
"""
{% extends 'base.html' %}

{% block content %}
<div class="max-w-2xl mx-auto">
    <h1 class="text-3xl font-bold mb-6">Import Data</h1>
    <div class="bg-white shadow-md rounded-lg p-6">
        <form method="post" enctype="multipart/form-data" class="space-y-4">
            {% csrf_token %}
            {% for field in form %}
            <div>
                <label for="{{ field.id_for_label }}" class="block text-sm font-medium text-gray-700">
                    {{ field.label }}
                </label>
                <div class="mt-1">
                    {{ field }}
                </div>
                {% if field.help_text %}
                <p class="mt-2 text-sm text-gray-500">{{ field.help_text }}</p>
                {% endif %}
                {% for error in field.errors %}
                <p class="mt-2 text-sm text-red-600">{{ error }}</p>
                {% endfor %}
            </div>
            {% endfor %}
            <div class="flex justify-end space-x-3">
                <button type="submit"
                    class="inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                    Upload
                </button>
                <a href="{% url 'vendor_list' %}"
                    class="inline-flex justify-center py-2 px-4 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                    Cancel
                </a>
            </div>
        </form>
    </div>
</div>
{% endblock %}
"""

================================================================================
File: templates\base.html
================================================================================
"""
{% load static %}
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="shortcut icon" type="image/x-icon" href="{% static 'favicon.ico' %}">
    <script src="https://cdn.jsdelivr.net/npm/chart.js@3.7.1/dist/chart.min.js"></script>
    <title>{% block title %}Vendor Management System{% endblock %}</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    fontFamily: {
                        'sans': ['Roboto', 'sans-serif'],
                        'headline': ['Avenir LT Com', 'sans-serif'],
                    },
                    colors: {
                        'navy': '#0D173D',
                        'raspberry': '#9C224F',
                        'red': '#C13838',
                        'light-blue': '#38D4FF',
                        'green': '#31A784',
                        'orange': '#DB6C33',
                        'orange-50': '#FFF1DB',
                    },
                },
            },
        }
    </script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap');
        @import url('https://fonts.googleapis.com/css2?family=Avenir+LT+Pro:wght@400;700&display=swap');

        .fade-in {
            animation: fadeIn 0.5s ease-in-out;
        }

        .slide-in {
            animation: slideIn 0.5s ease-in-out;
        }

        @keyframes fadeIn {
            from {
                opacity: 0;
            }

            to {
                opacity: 1;
            }
        }

        @keyframes slideIn {
            from {
                transform: translateY(20px);
                opacity: 0;
            }

            to {
                transform: translateY(0);
                opacity: 1;
            }
        }

        .transition-all {
            transition: all 0.3s ease-in-out;
        }
    </style>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/chart.js@3.7.1/dist/chart.min.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js@3.7.1/dist/chart.min.js"></script>
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.10.24/css/jquery.dataTables.css">
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script type="text/javascript" charset="utf8"
        src="https://cdn.datatables.net/1.10.24/js/jquery.dataTables.js"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/shepherd.js@8.3.1/dist/css/shepherd.css" />
    <script src="https://cdn.jsdelivr.net/npm/shepherd.js@8.3.1/dist/js/shepherd.min.js"></script>
    <script src="https://unpkg.com/@popperjs/core@2"></script>
    <script src="https://unpkg.com/tippy.js@6"></script>
</head>

<body class="bg-gray-100 font-sans">
    <nav class="bg-white shadow-lg" aria-label="Main Navigation">
        <div class="max-w-7xl mx-auto px-4">
            <div class="flex justify-between items-center py-4">
                <div class="flex items-center">
                    <a href="{% url 'dashboard' %}" class="flex items-center">
                        <span class="font-headline font-bold text-navy text-lg">Vendor Management</span>
                    </a>
                    <div class="hidden md:flex items-center space-x-4 ml-10">
                        <a href="{% url 'dashboard' %}"
                            class="text-navy hover:text-raspberry transition-all focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-light-blue"
                            aria-current="page">Home</a>
                        <a href="{% url 'vendor_list' %}"
                            class="text-navy hover:text-raspberry transition-all focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-light-blue">Vendors</a>
                        <a href="{% url 'import_data' %}"
                            class="text-navy hover:text-raspberry transition-all focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-light-blue">Import
                            Data</a>
                    </div>
                </div>
                <div class="flex items-center space-x-4">
                    <form action="{% url 'global_search' %}" method="get" class="hidden md:flex items-center">
                        <input type="text" name="q" placeholder="Search..."
                            class="border-2 border-gray-300 bg-white h-10 px-5 pr-16 rounded-lg text-sm focus:outline-none">
                        <button type="submit"
                            class="ml-2 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded transition-all focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                            Search
                        </button>
                    </form>
                    {% if user.is_authenticated %}
                    <span class="text-navy">Welcome, {{ user.username }}</span>
                    <form method="post" action="{% url 'logout' %}">
                        {% csrf_token %}
                        <button type="submit"
                            class="bg-orange-50 text-navy hover:bg-orange transition-all font-medium rounded-lg text-sm px-5 py-2.5 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-orange">Logout</button>
                    </form>
                    {% else %}
                    <a href="{% url 'login' %}"
                        class="bg-orange-50 text-navy hover:bg-orange transition-all font-medium rounded-lg text-sm px-5 py-2.5 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-orange">Login</a>
                    {% endif %}
                </div>
            </div>
        </div>
    </nav>

    <main class="max-w-7xl mx-auto mt-6 px-4 sm:px-6 lg:px-8">
        {% block content %}{% endblock %}
    </main>

    <footer class="bg-navy text-white mt-12 py-6">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <p class="text-center">&copy; {% now "Y" %} Vendor Management System. All rights reserved.</p>
        </div>
    </footer>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Initialize tooltips
            tippy('[data-tippy-content]');

            // You can add more global JavaScript here
        });
    </script>
    {% block extra_js %}{% endblock %}
</body>

</html>
"""

================================================================================
File: templates\registration\login.html
================================================================================
"""
{% extends 'base.html' %}

{% block content %}
<div class="flex items-center justify-center min-h-screen bg-gray-100">
    <div class="px-8 py-6 mt-4 text-left bg-white shadow-lg rounded-lg">
        <h3 class="text-2xl font-bold text-center">Login to your account</h3>
        <form method="post" class="mt-4">
            {% csrf_token %}
            <div class="mt-4">
                <label class="block" for="username">Username</label>
                <input type="text" name="username" id="username" placeholder="Username" required
                    class="w-full px-4 py-2 mt-2 border rounded-md focus:outline-none focus:ring-1 focus:ring-blue-600">
            </div>
            <div class="mt-4">
                <label class="block" for="password">Password</label>
                <input type="password" name="password" id="password" placeholder="Password" required
                    class="w-full px-4 py-2 mt-2 border rounded-md focus:outline-none focus:ring-1 focus:ring-blue-600">
            </div>
            <div class="flex items-baseline justify-between">
                <button type="submit" class="px-6 py-2 mt-4 text-white bg-blue-600 rounded-lg hover:bg-blue-900">Login</button>
            </div>
        </form>
    </div>
</div>
{% endblock %}

"""

================================================================================
File: vendor_management\asgi.py
================================================================================
"""
"""
ASGI config for vendor_management project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'vendor_management.settings')

application = get_asgi_application()

"""

================================================================================
File: vendor_management\settings.py
================================================================================
"""
"""
Django settings for vendor_management project.

Generated by 'django-admin startproject' using Django 5.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-(suu2h)7c%z26@zx(qecsctq(+))pyy0db$3que8371@%cnxjf"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.humanize",
    # My apps
    "theme",
    "core",
    "data_import",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "vendor_management.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],  # Make sure this line is present
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "vendor_management.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = "/static/"
STATICFILES_DIRS = [
    BASE_DIR / "static",
]
STATIC_ROOT = BASE_DIR / "staticfiles"

MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

LOGIN_URL = "login"
LOGIN_REDIRECT_URL = "dashboard"
LOGOUT_REDIRECT_URL = "login"

CSRF_COOKIE_SECURE = False
SESSION_COOKIE_SECURE = False
CSRF_COOKIE_HTTPONLY = False

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
        },
    },
    "root": {
        "handlers": ["console"],
        "level": "DEBUG",
    },
}

TAILWIND_APP_NAME = "theme"

"""

================================================================================
File: vendor_management\urls.py
================================================================================
"""
"""
URL configuration for vendor_management project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/5.0/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""

# core/models.py
from django.contrib import admin
from django.urls import path, include
from django.contrib.auth import views as auth_views
from django.views.generic import RedirectView
from django.conf import settings
from django.conf.urls.static import static

urlpatterns = [
    path("admin/", admin.site.urls),
    path("", include("core.urls")),
    path("import/", include("data_import.urls")),
    path("accounts/login/", auth_views.LoginView.as_view(), name="login"),
    path(
        "accounts/logout/",
        auth_views.LogoutView.as_view(next_page="login"),
        name="logout",
    ),
]

if settings.DEBUG:
    urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)

"""

================================================================================
File: vendor_management\wsgi.py
================================================================================
"""
"""
WSGI config for vendor_management project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'vendor_management.settings')

application = get_wsgi_application()

"""

================================================================================
File: vendor_management\__init__.py
================================================================================
"""

"""