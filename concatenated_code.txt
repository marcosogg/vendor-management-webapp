Directory structure of included files:
└── vendor-management-webapp
    └── manage.py
    └── core
        └── core/
            └── admin.py
            └── apps.py
            └── forms.py
            └── models.py
            └── tests.py
            └── urls.py
            └── views.py
            └── __init__.py
            └── management/
                └── commands/
                    └── describe_models.py
                    └── populate_db.py
                    └── __pycache__/
            └── migrations/
                └── 0001_initial.py
                └── 0002_part_created_at_part_updated_at_risk_created_at_and_more.py
                └── __init__.py
                └── __pycache__/
            └── templates/
                └── core/
                    └── home.html
                    └── pagination.html
                    └── part_form.html
                    └── risk_form.html
                    └── spend_form.html
                    └── vendor_form.html
                    └── vendor_list.html
                    └── vendor_profile.html
            └── __pycache__/
    └── data_import
        └── data_import/
            └── admin.py
            └── apps.py
            └── forms.py
            └── import_handlers.py
            └── models.py
            └── tests.py
            └── urls.py
            └── views.py
            └── __init__.py
            └── migrations/
                └── __init__.py
                └── __pycache__/
            └── templates/
                └── data_import/
                    └── import.html
            └── __pycache__/
    └── templates
        └── templates/
            └── base.html
    └── vendor_management
        └── vendor_management/
            └── asgi.py
            └── settings.py
            └── urls.py
            └── wsgi.py
            └── __init__.py
            └── __pycache__/



================================================================================
File: manage.py
================================================================================
"""
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'vendor_management.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()

"""

================================================================================
File: core\admin.py
================================================================================
"""
# core/admin.py
from django.contrib import admin
from .models import Vendor, Part, Spend, Risk

admin.site.register(Vendor)
admin.site.register(Part)
admin.site.register(Spend)
admin.site.register(Risk)

"""

================================================================================
File: core\apps.py
================================================================================
"""
from django.apps import AppConfig


class CoreConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'core'

"""

================================================================================
File: core\forms.py
================================================================================
"""
from django import forms
from .models import Vendor, Part, Spend, Risk

class VendorForm(forms.ModelForm):
    class Meta:
        model = Vendor
        fields = ['vendor_name', 'vendor_id', 'payment_terms', 'credit_limit', 'contract_year', 'relationship_type']

class PartForm(forms.ModelForm):
    class Meta:
        model = Part
        fields = ['part_number', 'vendor', 'buyer', 'discount']

class SpendForm(forms.ModelForm):
    class Meta:
        model = Spend
        fields = ['vendor', 'year', 'usd_amount']

class RiskForm(forms.ModelForm):
    class Meta:
        model = Risk
        fields = ['vendor', 'risk_level']

"""

================================================================================
File: core\models.py
================================================================================
"""
from django.db import models
from django.core.validators import MinValueValidator, MaxValueValidator

class Vendor(models.Model):
    vendor_name = models.CharField(max_length=200)
    vendor_id = models.CharField(max_length=50, unique=True)
    payment_terms = models.CharField(max_length=100)
    credit_limit = models.DecimalField(max_digits=10, decimal_places=2, validators=[MinValueValidator(0)])
    contract_year = models.IntegerField(validators=[MinValueValidator(1900), MaxValueValidator(2100)])
    relationship_type = models.CharField(max_length=50, choices=[
        ('STRATEGIC', 'Strategic'),
        ('PREFERRED', 'Preferred'),
        ('APPROVED', 'Approved'),
        ('TERMINATED', 'Terminated')
    ])
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"{self.vendor_name} ({self.vendor_id})"

class Part(models.Model):
    part_number = models.CharField(max_length=50, unique=True)
    vendor = models.ForeignKey(Vendor, on_delete=models.CASCADE, related_name='parts')
    buyer = models.CharField(max_length=100)
    discount = models.DecimalField(max_digits=5, decimal_places=2, validators=[MinValueValidator(0), MaxValueValidator(100)])
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"{self.part_number} - {self.vendor.vendor_name}"

class Spend(models.Model):
    vendor = models.ForeignKey(Vendor, on_delete=models.CASCADE, related_name='spends')
    year = models.IntegerField(validators=[MinValueValidator(1900), MaxValueValidator(2100)])
    usd_amount = models.DecimalField(max_digits=12, decimal_places=2, validators=[MinValueValidator(0)])
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        unique_together = ['vendor', 'year']

    def __str__(self):
        return f"{self.vendor.vendor_name} - {self.year}: ${self.usd_amount}"

class Risk(models.Model):
    vendor = models.OneToOneField(Vendor, on_delete=models.CASCADE, related_name='risk')
    risk_level = models.CharField(max_length=50, choices=[
        ('LOW', 'Low'),
        ('MEDIUM', 'Medium'),
        ('HIGH', 'High')
    ])
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"{self.vendor.vendor_name} - Risk: {self.get_risk_level_display()}"

"""

================================================================================
File: core\tests.py
================================================================================
"""
from django.test import TestCase

# Create your tests here.

"""

================================================================================
File: core\urls.py
================================================================================
"""
# core/urls.py

from django.urls import path
from .views import HomeView, VendorListView, VendorDetailView

urlpatterns = [
    path("", HomeView.as_view(), name="home"),
    path("vendors/", VendorListView.as_view(), name="vendor_list"),  # Updated
    path("vendors/<int:pk>/", VendorDetailView.as_view(), name="vendor_detail"),
]

"""

================================================================================
File: core\views.py
================================================================================
"""
# core/views.py

from django.views.generic import ListView, DetailView
from django.views.generic.base import TemplateView
from django.db.models import Q, Sum, Count
from .models import Vendor, Part, Spend, Risk


class HomeView(TemplateView):
    template_name = "core/home.html"

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["vendor_count"] = Vendor.objects.count()
        context["part_count"] = Part.objects.count()
        context["spend_total"] = (
            Spend.objects.aggregate(total=Sum("usd_amount"))["total"] or 0
        )
        context["high_risk_count"] = Risk.objects.filter(risk_level="High").count()

        # Additional statistics
        context["avg_spend_per_vendor"] = (
            context["spend_total"] / context["vendor_count"]
            if context["vendor_count"] > 0
            else 0
        )
        context["top_vendors"] = Vendor.objects.annotate(
            total_spend=Sum("spends__usd_amount")
        ).order_by("-total_spend")[:5]

        return context


class VendorListView(ListView):
    model = Vendor
    template_name = "core/vendor_list.html"  # Updated
    context_object_name = "vendors"
    paginate_by = 10

    def get_queryset(self):
        queryset = super().get_queryset()
        search_query = self.request.GET.get("search", "")
        if search_query:
            queryset = queryset.filter(
                Q(vendor_name__icontains=search_query)
                | Q(vendor_id__icontains=search_query)
            )
        return queryset

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["search_query"] = self.request.GET.get("search", "")
        return context


class VendorDetailView(DetailView):
    model = Vendor
    template_name = "core/vendor_profile.html"
    context_object_name = "vendor"

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        vendor = self.get_object()
        context["parts"] = vendor.parts.all()
        context["spends"] = vendor.spends.all()
        context["risk"] = vendor.risk
        return context


# Remove any other views that were used for data modification

"""

================================================================================
File: core\__init__.py
================================================================================
"""

"""

================================================================================
File: core\management\commands\describe_models.py
================================================================================
"""
from django.core.management.base import BaseCommand
from django.apps import apps

class Command(BaseCommand):
    help = 'Describes the structure of all models in the project'

    def handle(self, *args, **options):
        for model in apps.get_models():
            self.stdout.write(self.style.SUCCESS(f'\nModel: {model.__name__}'))
            self.stdout.write('Fields:')
            for field in model._meta.fields:
                self.stdout.write(f'  - {field.name}: {field.get_internal_type()}')
            self.stdout.write('Relationships:')
            for field in model._meta.many_to_many:
                self.stdout.write(f'  - {field.name}: ManyToManyField to {field.related_model.__name__}')
            for related_object in model._meta.related_objects:
                self.stdout.write(f'  - {related_object.name}: {related_object.get_internal_type()} from {related_object.related_model.__name__}')

"""

================================================================================
File: core\management\commands\populate_db.py
================================================================================
"""
# core/management/commands/populate_db.py

from django.core.management.base import BaseCommand
from django.db import transaction
from core.models import Vendor, Part, Spend, Risk
from django.utils import timezone
import random


class Command(BaseCommand):
    help = "Populates the database with sample data for testing"

    @transaction.atomic
    def handle(self, *args, **kwargs):
        self.stdout.write("Populating database...")

        # Create vendors
        vendors = []
        for i in range(20):
            vendor = Vendor.objects.create(
                vendor_name=f"Vendor {i+1}",
                vendor_id=f"V{i+1:03d}",
                payment_terms=random.choice(["Net 30", "Net 60", "Net 90"]),
                credit_limit=random.randint(10000, 1000000),
                contract_year=random.randint(2020, 2024),
                relationship_type=random.choice(
                    ["Strategic", "Preferred", "Approved", "New"]
                ),
            )
            vendors.append(vendor)

        # Create parts
        for i in range(100):
            Part.objects.create(
                part_number=f"P{i+1:04d}",
                vendor=random.choice(vendors),
                buyer=f"Buyer {random.randint(1, 5)}",
                discount=random.uniform(0, 0.3),
            )

        # Create spend data
        current_year = timezone.now().year
        for vendor in vendors:
            for year in range(current_year - 3, current_year + 1):
                Spend.objects.create(
                    vendor=vendor, year=year, usd_amount=random.randint(10000, 1000000)
                )

        # Create risk assessments
        for vendor in vendors:
            Risk.objects.create(
                vendor=vendor, risk_level=random.choice(["Low", "Medium", "High"])
            )

        self.stdout.write(self.style.SUCCESS("Database successfully populated!"))

"""

================================================================================
File: core\migrations\0001_initial.py
================================================================================
"""
# Generated by Django 5.0.7 on 2024-07-26 18:11

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Vendor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vendor_name', models.CharField(max_length=200)),
                ('vendor_id', models.CharField(max_length=50, unique=True)),
                ('payment_terms', models.CharField(max_length=100)),
                ('credit_limit', models.DecimalField(decimal_places=2, max_digits=10)),
                ('contract_year', models.IntegerField()),
                ('relationship_type', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Risk',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('risk_level', models.CharField(max_length=50)),
                ('vendor', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='risk', to='core.vendor')),
            ],
        ),
        migrations.CreateModel(
            name='Part',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('part_number', models.CharField(max_length=50, unique=True)),
                ('buyer', models.CharField(max_length=100)),
                ('discount', models.DecimalField(decimal_places=2, max_digits=5)),
                ('vendor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='parts', to='core.vendor')),
            ],
        ),
        migrations.CreateModel(
            name='Spend',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.IntegerField()),
                ('usd_amount', models.DecimalField(decimal_places=2, max_digits=12)),
                ('vendor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='spends', to='core.vendor')),
            ],
            options={
                'unique_together': {('vendor', 'year')},
            },
        ),
    ]

"""

================================================================================
File: core\migrations\0002_part_created_at_part_updated_at_risk_created_at_and_more.py
================================================================================
"""
# Generated by Django 5.0.7 on 2024-07-26 18:23

import django.core.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0001_initial'),
    ]

    operations = [
        migrations.AddField(
            model_name='part',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True, default=django.utils.timezone.now),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='part',
            name='updated_at',
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.AddField(
            model_name='risk',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True, default=django.utils.timezone.now),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='risk',
            name='updated_at',
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.AddField(
            model_name='spend',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True, default=django.utils.timezone.now),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='spend',
            name='updated_at',
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.AddField(
            model_name='vendor',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True, default=django.utils.timezone.now),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='vendor',
            name='updated_at',
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.AlterField(
            model_name='part',
            name='discount',
            field=models.DecimalField(decimal_places=2, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)]),
        ),
        migrations.AlterField(
            model_name='risk',
            name='risk_level',
            field=models.CharField(choices=[('LOW', 'Low'), ('MEDIUM', 'Medium'), ('HIGH', 'High')], max_length=50),
        ),
        migrations.AlterField(
            model_name='spend',
            name='usd_amount',
            field=models.DecimalField(decimal_places=2, max_digits=12, validators=[django.core.validators.MinValueValidator(0)]),
        ),
        migrations.AlterField(
            model_name='spend',
            name='year',
            field=models.IntegerField(validators=[django.core.validators.MinValueValidator(1900), django.core.validators.MaxValueValidator(2100)]),
        ),
        migrations.AlterField(
            model_name='vendor',
            name='contract_year',
            field=models.IntegerField(validators=[django.core.validators.MinValueValidator(1900), django.core.validators.MaxValueValidator(2100)]),
        ),
        migrations.AlterField(
            model_name='vendor',
            name='credit_limit',
            field=models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)]),
        ),
        migrations.AlterField(
            model_name='vendor',
            name='relationship_type',
            field=models.CharField(choices=[('STRATEGIC', 'Strategic'), ('PREFERRED', 'Preferred'), ('APPROVED', 'Approved'), ('TERMINATED', 'Terminated')], max_length=50),
        ),
    ]

"""

================================================================================
File: core\migrations\__init__.py
================================================================================
"""

"""

================================================================================
File: core\templates\core\home.html
================================================================================
"""
{% extends 'base.html' %}
{% load static %}

{% block title %}Home - Vendor Management{% endblock %}

{% block content %}
<div class="container">
    <h1 class="mb-4">Vendor Management Dashboard</h1>

    <div class="row">
        <div class="col-md-3 mb-4">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Total Vendors</h5>
                    <p class="card-text display-4">{{ vendor_count }}</p>
                </div>
            </div>
        </div>
        <div class="col-md-3 mb-4">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Total Parts</h5>
                    <p class="card-text display-4">{{ part_count }}</p>
                </div>
            </div>
        </div>
        <div class="col-md-3 mb-4">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Total Spend</h5>
                    <p class="card-text display-4">${{ spend_total|floatformat:2 }}</p>
                </div>
            </div>
        </div>
        <div class="col-md-3 mb-4">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">High Risk Vendors</h5>
                    <p class="card-text display-4">{{ high_risk_count }}</p>
                </div>
            </div>
        </div>
    </div>

    <div class="row mt-4">
        <div class="col-md-6 mb-4">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Average Spend per Vendor</h5>
                    <p class="card-text display-4">${{ avg_spend_per_vendor|floatformat:2 }}</p>
                </div>
            </div>
        </div>
        <div class="col-md-6 mb-4">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Top 5 Vendors by Spend</h5>
                    <ul class="list-group">
                        {% for vendor in top_vendors %}
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            {{ vendor.vendor_name }}
                            <span class="badge bg-primary rounded-pill">${{ vendor.total_spend|floatformat:2 }}</span>
                        </li>
                        {% endfor %}
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}
"""

================================================================================
File: core\templates\core\pagination.html
================================================================================
"""
{% if is_paginated %}
<nav aria-label="Page navigation">
    <ul class="pagination justify-content-center">
        {% if page_obj.has_previous %}
            <li class="page-item"><a class="page-link" href="?page=1{% if search_query %}&search={{ search_query }}{% endif %}">&laquo; First</a></li>
            <li class="page-item"><a class="page-link" href="?page={{ page_obj.previous_page_number }}{% if search_query %}&search={{ search_query }}{% endif %}">Previous</a></li>
        {% endif %}

        <li class="page-item active"><span class="page-link">Page {{ page_obj.number }} of {{ page_obj.paginator.num_pages }}</span></li>

        {% if page_obj.has_next %}
            <li class="page-item"><a class="page-link" href="?page={{ page_obj.next_page_number }}{% if search_query %}&search={{ search_query }}{% endif %}">Next</a></li>
            <li class="page-item"><a class="page-link" href="?page={{ page_obj.paginator.num_pages }}{% if search_query %}&search={{ search_query }}{% endif %}">Last &raquo;</a></li>
        {% endif %}
    </ul>
</nav>
{% endif %}
"""

================================================================================
File: core\templates\core\part_form.html
================================================================================
"""
{% extends 'base.html' %}
{% load bootstrap4 %}

{% block content %}
<h1>{% if form.instance.pk %}Edit{% else %}Add{% endif %} Part</h1>
<form method="post">
    {% csrf_token %}
    {% bootstrap_form form %}
    {% buttons %}
        <button type="submit" class="btn btn-primary">Save</button>
        <a href="{% url 'vendor-list' %}" class="btn btn-secondary">Cancel</a>
    {% endbuttons %}
</form>
{% endblock %}
"""

================================================================================
File: core\templates\core\risk_form.html
================================================================================
"""
{% extends 'base.html' %}
{% load bootstrap4 %}

{% block content %}
<h1>{% if form.instance.pk %}Edit{% else %}Add{% endif %} Risk Assessment</h1>
<form method="post">
    {% csrf_token %}
    {% bootstrap_form form %}
    {% buttons %}
        <button type="submit" class="btn btn-primary">Save</button>
        <a href="{% url 'vendor-list' %}" class="btn btn-secondary">Cancel</a>
    {% endbuttons %}
</form>
{% endblock %}
"""

================================================================================
File: core\templates\core\spend_form.html
================================================================================
"""
{% extends 'base.html' %}
{% load bootstrap4 %}

{% block content %}
<h1>{% if form.instance.pk %}Edit{% else %}Add{% endif %} Spend</h1>
<form method="post">
    {% csrf_token %}
    {% bootstrap_form form %}
    {% buttons %}
        <button type="submit" class="btn btn-primary">Save</button>
        <a href="{% url 'vendor-list' %}" class="btn btn-secondary">Cancel</a>
    {% endbuttons %}
</form>
{% endblock %}
"""

================================================================================
File: core\templates\core\vendor_form.html
================================================================================
"""
{% extends 'base.html' %}
{% load bootstrap4 %}

{% block content %}
<h1>{% if form.instance.pk %}Edit{% else %}Add{% endif %} Vendor</h1>
<form method="post">
    {% csrf_token %}
    {% bootstrap_form form %}
    {% buttons %}
        <button type="submit" class="btn btn-primary">Save</button>
        <a href="{% url 'vendor-list' %}" class="btn btn-secondary">Cancel</a>
    {% endbuttons %}
</form>
{% endblock %}
"""

================================================================================
File: core\templates\core\vendor_list.html
================================================================================
"""
{% extends 'base.html' %}

{% block content %}
<h1>Vendor List</h1>

<form method="get" class="mb-3">
    <div class="input-group">
        <input type="text" name="search" class="form-control" placeholder="Search vendors..."
            value="{{ search_query }}">
        <div class="input-group-append">
            <button class="btn btn-outline-secondary" type="submit">Search</button>
        </div>
    </div>
</form>

<table class="table table-striped">
    <thead>
        <tr>
            <th>Vendor Name</th>
            <th>Vendor ID</th>
            <th>Payment Terms</th>
            <th>Contract Year</th>
            <th>Relationship Type</th>
        </tr>
    </thead>
    <tbody>
        {% for vendor in vendors %}
        <tr>
            <td>{{ vendor.vendor_name }}</td>
            <td>{{ vendor.vendor_id }}</td>
            <td>{{ vendor.payment_terms }}</td>
            <td>{{ vendor.contract_year }}</td>
            <td>{{ vendor.relationship_type }}</td>
        </tr>
        {% endfor %}
    </tbody>
</table>

{% include 'core/pagination.html' %}
{% endblock %}
"""

================================================================================
File: core\templates\core\vendor_profile.html
================================================================================
"""
{% extends 'base.html' %}

{% block content %}
<h1>{{ vendor.vendor_name }}</h1>
<p><strong>Vendor ID:</strong> {{ vendor.vendor_id }}</p>
<p><strong>Payment Terms:</strong> {{ vendor.payment_terms }}</p>
<p><strong>Credit Limit:</strong> ${{ vendor.credit_limit }}</p>
<p><strong>Contract Year:</strong> {{ vendor.contract_year }}</p>
<p><strong>Relationship Type:</strong> {{ vendor.get_relationship_type_display }}</p>

<h2>Parts</h2>
<ul>
    {% for part in parts %}
    <li>{{ part.part_number }} - Buyer: {{ part.buyer }}, Discount: {{ part.discount }}%</li>
    {% empty %}
    <li>No parts found for this vendor.</li>
    {% endfor %}
</ul>

<h2>Spend History</h2>
<ul>
    {% for spend in spends %}
    <li>{{ spend.year }}: ${{ spend.usd_amount }}</li>
    {% empty %}
    <li>No spend history found for this vendor.</li>
    {% endfor %}
</ul>

<h2>Risk Assessment</h2>
{% if risk %}
<p>Risk Level: {{ risk.get_risk_level_display }}</p>
{% else %}
<p>No risk assessment available for this vendor.</p>
{% endif %}
{% endblock %}
"""

================================================================================
File: data_import\admin.py
================================================================================
"""
from django.contrib import admin

# Register your models here.

"""

================================================================================
File: data_import\apps.py
================================================================================
"""
from django.apps import AppConfig


class DataImportConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'data_import'

"""

================================================================================
File: data_import\forms.py
================================================================================
"""
from django import forms


class FileUploadForm(forms.Form):
    file = forms.FileField(label="Select a CSV or Excel file")

    def clean_file(self):
        file = self.cleaned_data["file"]
        ext = file.name.split(".")[-1].lower()
        if ext not in ["csv", "xlsx", "xls"]:
            raise forms.ValidationError("Only CSV and Excel files are allowed.")
        return file

"""

================================================================================
File: data_import\import_handlers.py
================================================================================
"""
import pandas as pd
from core.models import Vendor, Part, Spend, Risk

def handle_uploaded_file(file):
    # Determine file type and read accordingly
    if file.name.endswith('.csv'):
        df = pd.read_csv(file)
    elif file.name.endswith(('.xlsx', '.xls')):
        df = pd.read_excel(file)
    else:
        raise ValueError("Unsupported file format")

    # Process the data
    records_imported = 0
    for _, row in df.iterrows():
        # This is a simplified example. You'll need to adapt this to your specific data structure.
        vendor, created = Vendor.objects.get_or_create(
            vendor_id=row['vendor_id'],
            defaults={
                'vendor_name': row['vendor_name'],
                'payment_terms': row['payment_terms'],
                'credit_limit': row['credit_limit'],
                'contract_year': row['contract_year'],
                'relationship_type': row['relationship_type']
            }
        )
        if created:
            records_imported += 1

        # Similar processing for Part, Spend, and Risk models...

    return records_imported

"""

================================================================================
File: data_import\models.py
================================================================================
"""
from django.db import models

# Create your models here.

"""

================================================================================
File: data_import\tests.py
================================================================================
"""
from django.test import TestCase

# Create your tests here.

"""

================================================================================
File: data_import\urls.py
================================================================================
"""
from django.urls import path
from .views import import_data

urlpatterns = [
    path("", import_data, name="import_data"),
]

"""

================================================================================
File: data_import\views.py
================================================================================
"""
from django.shortcuts import render, redirect
from django.contrib import messages
from .forms import FileUploadForm
from .import_handlers import handle_uploaded_file

def import_data(request):
    if request.method == 'POST':
        form = FileUploadForm(request.POST, request.FILES)
        if form.is_valid():
            uploaded_file = request.FILES['file']
            try:
                result = handle_uploaded_file(uploaded_file)
                messages.success(request, f'Successfully imported {result} records.')
                return redirect('vendor-list')
            except Exception as e:
                messages.error(request, f'Error importing file: {str(e)}')
    else:
        form = FileUploadForm()
    return render(request, 'data_import/import.html', {'form': form})

"""

================================================================================
File: data_import\__init__.py
================================================================================
"""

"""

================================================================================
File: data_import\migrations\__init__.py
================================================================================
"""

"""

================================================================================
File: data_import\templates\data_import\import.html
================================================================================
"""
{% extends 'base.html' %}
{% load bootstrap4 %}

{% block content %}
<h1>Import Data</h1>
<form method="post" enctype="multipart/form-data">
    {% csrf_token %}
    {% bootstrap_form form %}
    {% buttons %}
    <button type="submit" class="btn btn-primary">Upload</button>
    <a href="{% url 'vendor_list' %}" class="btn btn-secondary">Cancel</a>
    {% endbuttons %}
</form>
{% endblock %}
"""

================================================================================
File: templates\base.html
================================================================================
"""
{% load bootstrap4 %}
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}Vendor Management WebApp{% endblock %}</title>
    {% bootstrap_css %}
    {% bootstrap_javascript jquery='full' %}
</head>

<body>
    <nav class="navbar navbar-expand-lg navbar-light bg-light">
        <a class="navbar-brand" href="{% url 'home' %}">Vendor Management</a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav"
            aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav">
                <li class="nav-item">
                    <a class="nav-link" href="{% url 'home' %}">Home</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="{% url 'vendor_list' %}">Vendors</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="{% url 'import_data' %}">Import Data</a>
                </li>
            </ul>
        </div>
    </nav>

    <div class="container mt-4">
        {% bootstrap_messages %}
        {% block content %}{% endblock %}
    </div>
</body>

</html>
"""

================================================================================
File: vendor_management\asgi.py
================================================================================
"""
"""
ASGI config for vendor_management project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'vendor_management.settings')

application = get_asgi_application()

"""

================================================================================
File: vendor_management\settings.py
================================================================================
"""
"""
Django settings for vendor_management project.

Generated by 'django-admin startproject' using Django 5.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-(suu2h)7c%z26@zx(qecsctq(+))pyy0db$3que8371@%cnxjf"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # My apps
    "core",
    "data_import",
    "bootstrap4",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "vendor_management.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "vendor_management.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = "/static/"
STATICFILES_DIRS = [
    BASE_DIR / "static",
]
STATIC_ROOT = BASE_DIR / "staticfiles"

MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

"""

================================================================================
File: vendor_management\urls.py
================================================================================
"""
"""
URL configuration for vendor_management project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/5.0/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
# core/models.py
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('core.urls')),
    path('import/', include('data_import.urls')),
]

"""

================================================================================
File: vendor_management\wsgi.py
================================================================================
"""
"""
WSGI config for vendor_management project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'vendor_management.settings')

application = get_wsgi_application()

"""

================================================================================
File: vendor_management\__init__.py
================================================================================
"""

"""